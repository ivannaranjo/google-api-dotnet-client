// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by google-apis-code-generator 1.5.1
//     C# generator version: 1.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

/**
 * \brief
 *   Enterprise Apps Reseller API Version v1sandbox
 *
 * \section ApiInfo API Version Information
 *    <table>
 *      <tr><th>API
 *          <td><a href='https://developers.google.com/google-apps/reseller/'>Enterprise Apps Reseller API</a>
 *      <tr><th>API Version<td>v1sandbox
 *      <tr><th>API Rev<td>20160329 (453)
 *      <tr><th>API Docs
 *          <td><a href='https://developers.google.com/google-apps/reseller/'>
 *              https://developers.google.com/google-apps/reseller/</a>
 *      <tr><th>Discovery Name<td>reseller
 *    </table>
 *
 * \section ForMoreInfo For More Information
 *
 * The complete API documentation for using Enterprise Apps Reseller API can be found at
 * <a href='https://developers.google.com/google-apps/reseller/'>https://developers.google.com/google-apps/reseller/</a>.
 *
 * For more information about the Google APIs Client Library for .NET, see
 * <a href='https://developers.google.com/api-client-library/dotnet/get_started'>
 * https://developers.google.com/api-client-library/dotnet/get_started</a>
 */

namespace Google.Apis.Reseller.v1sandbox
{
    /// <summary>The Reseller Service.</summary>
    public class ResellerService : Google.Apis.Services.BaseClientService
    {
        /// <summary>The API version.</summary>
        public const string Version = "v1sandbox";

        /// <summary>The discovery version used to generate this service.</summary>
        public static Google.Apis.Discovery.DiscoveryVersion DiscoveryVersionUsed =
            Google.Apis.Discovery.DiscoveryVersion.Version_1_0;

        /// <summary>Constructs a new service.</summary>
        public ResellerService() :
            this(new Google.Apis.Services.BaseClientService.Initializer()) {}

        /// <summary>Constructs a new service.</summary>
        /// <param name="initializer">The service initializer.</param>
        public ResellerService(Google.Apis.Services.BaseClientService.Initializer initializer)
            : base(initializer)
        {
            customers = new CustomersResource(this);
            subscriptions = new SubscriptionsResource(this);
        }

        /// <summary>Gets the service supported features.</summary>
        public override System.Collections.Generic.IList<string> Features
        {
            get { return new string[0]; }
        }

        /// <summary>Gets the service name.</summary>
        public override string Name
        {
            get { return "reseller"; }
        }

        /// <summary>Gets the service base URI.</summary>
        public override string BaseUri
        {
            get { return "https://www.googleapis.com/apps/reseller/v1sandbox/"; }
        }

        /// <summary>Gets the service base path.</summary>
        public override string BasePath
        {
            get { return "apps/reseller/v1sandbox/"; }
        }

        /// <summary>Available OAuth 2.0 scopes for use with the Enterprise Apps Reseller API.</summary>
        public class Scope
        {
            /// <summary>Manage users on your domain</summary>
            public static string AppsOrder = "https://www.googleapis.com/auth/apps.order";

            /// <summary>Manage users on your domain</summary>
            public static string AppsOrderReadonly = "https://www.googleapis.com/auth/apps.order.readonly";

        }



        private readonly CustomersResource customers;

        /// <summary>Gets the Customers resource.</summary>
        public virtual CustomersResource Customers
        {
            get { return customers; }
        }

        private readonly SubscriptionsResource subscriptions;

        /// <summary>Gets the Subscriptions resource.</summary>
        public virtual SubscriptionsResource Subscriptions
        {
            get { return subscriptions; }
        }
    }

    ///<summary>A base abstract class for Reseller requests.</summary>
    public abstract class ResellerBaseServiceRequest<TResponse> : Google.Apis.Requests.ClientServiceRequest<TResponse>
    {
        ///<summary>Constructs a new ResellerBaseServiceRequest instance.</summary>
        protected ResellerBaseServiceRequest(Google.Apis.Services.IClientService service)
            : base(service)
        {
        }

        /// <summary>Data format for the response.</summary>
        /// [default: json]
        [Google.Apis.Util.RequestParameterAttribute("alt", Google.Apis.Util.RequestParameterType.Query)]
        public virtual System.Nullable<AltEnum> Alt { get; set; }

        /// <summary>Data format for the response.</summary>
        public enum AltEnum
        {
            /// <summary>Responses with Content-Type of application/json</summary>
            [Google.Apis.Util.StringValueAttribute("json")]
            Json,
        }

        /// <summary>Selector specifying which fields to include in a partial response.</summary>
        [Google.Apis.Util.RequestParameterAttribute("fields", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string Fields { get; set; }

        /// <summary>API key. Your API key identifies your project and provides you with API access, quota, and reports.
        /// Required unless you provide an OAuth 2.0 token.</summary>
        [Google.Apis.Util.RequestParameterAttribute("key", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string Key { get; set; }

        /// <summary>OAuth 2.0 token for the current user.</summary>
        [Google.Apis.Util.RequestParameterAttribute("oauth_token", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string OauthToken { get; set; }

        /// <summary>Returns response with indentations and line breaks.</summary>
        /// [default: true]
        [Google.Apis.Util.RequestParameterAttribute("prettyPrint", Google.Apis.Util.RequestParameterType.Query)]
        public virtual System.Nullable<bool> PrettyPrint { get; set; }

        /// <summary>Available to use for quota purposes for server-side applications. Can be any arbitrary string
        /// assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.</summary>
        [Google.Apis.Util.RequestParameterAttribute("quotaUser", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string QuotaUser { get; set; }

        /// <summary>IP address of the site where the request originates. Use this if you want to enforce per-user
        /// limits.</summary>
        [Google.Apis.Util.RequestParameterAttribute("userIp", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string UserIp { get; set; }

        /// <summary>Initializes Reseller parameter list.</summary>
        protected override void InitParameters()
        {
            base.InitParameters();

            RequestParameters.Add(
                "alt", new Google.Apis.Discovery.Parameter
                {
                    Name = "alt",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = "json",
                    Pattern = null,
                });
            RequestParameters.Add(
                "fields", new Google.Apis.Discovery.Parameter
                {
                    Name = "fields",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "key", new Google.Apis.Discovery.Parameter
                {
                    Name = "key",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "oauth_token", new Google.Apis.Discovery.Parameter
                {
                    Name = "oauth_token",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "prettyPrint", new Google.Apis.Discovery.Parameter
                {
                    Name = "prettyPrint",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = "true",
                    Pattern = null,
                });
            RequestParameters.Add(
                "quotaUser", new Google.Apis.Discovery.Parameter
                {
                    Name = "quotaUser",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "userIp", new Google.Apis.Discovery.Parameter
                {
                    Name = "userIp",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
        }
    }

    /// <summary>The "customers" collection of methods.</summary>
    public class CustomersResource
    {
        private const string Resource = "customers";

        /// <summary>The service which this resource belongs to.</summary>
        private readonly Google.Apis.Services.IClientService service;

        /// <summary>Constructs a new resource.</summary>
        public CustomersResource(Google.Apis.Services.IClientService service)
        {
            this.service = service;

        }


        /// <summary>Gets a customer resource if one exists and is owned by the reseller.</summary>
        /// <param name="customerId">Id of the Customer</param>
        public virtual GetRequest Get(string customerId)
        {
            return new GetRequest(service, customerId);
        }

        /// <summary>Gets a customer resource if one exists and is owned by the reseller.</summary>
        public class GetRequest : ResellerBaseServiceRequest<Google.Apis.Reseller.v1sandbox.Data.Customer>
        {
            /// <summary>Constructs a new Get request.</summary>
            public GetRequest(Google.Apis.Services.IClientService service, string customerId)
                : base(service)
            {
                CustomerId = customerId;
                InitParameters();
            }


            /// <summary>Id of the Customer</summary>
            [Google.Apis.Util.RequestParameterAttribute("customerId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string CustomerId { get; private set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "get"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "GET"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "customers/{customerId}"; }
            }

            /// <summary>Initializes Get parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "customerId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "customerId",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }

        /// <summary>Creates a customer resource if one does not already exist.</summary>
        /// <param name="body">The body of the request.</param>
        public virtual InsertRequest Insert(Google.Apis.Reseller.v1sandbox.Data.Customer body)
        {
            return new InsertRequest(service, body);
        }

        /// <summary>Creates a customer resource if one does not already exist.</summary>
        public class InsertRequest : ResellerBaseServiceRequest<Google.Apis.Reseller.v1sandbox.Data.Customer>
        {
            /// <summary>Constructs a new Insert request.</summary>
            public InsertRequest(Google.Apis.Services.IClientService service, Google.Apis.Reseller.v1sandbox.Data.Customer body)
                : base(service)
            {
                Body = body;
                InitParameters();
            }


            /// <summary>An auth token needed for inserting a customer for which domain already exists. Can be generated
            /// at https://admin.google.com/TransferToken. Optional.</summary>
            [Google.Apis.Util.RequestParameterAttribute("customerAuthToken", Google.Apis.Util.RequestParameterType.Query)]
            public virtual string CustomerAuthToken { get; set; }


            /// <summary>Gets or sets the body of this request.</summary>
            Google.Apis.Reseller.v1sandbox.Data.Customer Body { get; set; }

            ///<summary>Returns the body of the request.</summary>
            protected override object GetBody() { return Body; }

            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "insert"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "POST"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "customers"; }
            }

            /// <summary>Initializes Insert parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "customerAuthToken", new Google.Apis.Discovery.Parameter
                    {
                        Name = "customerAuthToken",
                        IsRequired = false,
                        ParameterType = "query",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }

        /// <summary>Update a customer resource if one it exists and is owned by the reseller. This method supports
        /// patch semantics.</summary>
        /// <param name="body">The body of the request.</param>
        /// <param name="customerId">Id of the Customer</param>
        public virtual PatchRequest Patch(Google.Apis.Reseller.v1sandbox.Data.Customer body, string customerId)
        {
            return new PatchRequest(service, body, customerId);
        }

        /// <summary>Update a customer resource if one it exists and is owned by the reseller. This method supports
        /// patch semantics.</summary>
        public class PatchRequest : ResellerBaseServiceRequest<Google.Apis.Reseller.v1sandbox.Data.Customer>
        {
            /// <summary>Constructs a new Patch request.</summary>
            public PatchRequest(Google.Apis.Services.IClientService service, Google.Apis.Reseller.v1sandbox.Data.Customer body, string customerId)
                : base(service)
            {
                CustomerId = customerId;
                Body = body;
                InitParameters();
            }


            /// <summary>Id of the Customer</summary>
            [Google.Apis.Util.RequestParameterAttribute("customerId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string CustomerId { get; private set; }


            /// <summary>Gets or sets the body of this request.</summary>
            Google.Apis.Reseller.v1sandbox.Data.Customer Body { get; set; }

            ///<summary>Returns the body of the request.</summary>
            protected override object GetBody() { return Body; }

            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "patch"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "PATCH"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "customers/{customerId}"; }
            }

            /// <summary>Initializes Patch parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "customerId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "customerId",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }

        /// <summary>Update a customer resource if one it exists and is owned by the reseller.</summary>
        /// <param name="body">The body of the request.</param>
        /// <param name="customerId">Id of the Customer</param>
        public virtual UpdateRequest Update(Google.Apis.Reseller.v1sandbox.Data.Customer body, string customerId)
        {
            return new UpdateRequest(service, body, customerId);
        }

        /// <summary>Update a customer resource if one it exists and is owned by the reseller.</summary>
        public class UpdateRequest : ResellerBaseServiceRequest<Google.Apis.Reseller.v1sandbox.Data.Customer>
        {
            /// <summary>Constructs a new Update request.</summary>
            public UpdateRequest(Google.Apis.Services.IClientService service, Google.Apis.Reseller.v1sandbox.Data.Customer body, string customerId)
                : base(service)
            {
                CustomerId = customerId;
                Body = body;
                InitParameters();
            }


            /// <summary>Id of the Customer</summary>
            [Google.Apis.Util.RequestParameterAttribute("customerId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string CustomerId { get; private set; }


            /// <summary>Gets or sets the body of this request.</summary>
            Google.Apis.Reseller.v1sandbox.Data.Customer Body { get; set; }

            ///<summary>Returns the body of the request.</summary>
            protected override object GetBody() { return Body; }

            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "update"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "PUT"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "customers/{customerId}"; }
            }

            /// <summary>Initializes Update parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "customerId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "customerId",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }
    }

    /// <summary>The "subscriptions" collection of methods.</summary>
    public class SubscriptionsResource
    {
        private const string Resource = "subscriptions";

        /// <summary>The service which this resource belongs to.</summary>
        private readonly Google.Apis.Services.IClientService service;

        /// <summary>Constructs a new resource.</summary>
        public SubscriptionsResource(Google.Apis.Services.IClientService service)
        {
            this.service = service;

        }


        /// <summary>Activates a subscription previously suspended by the reseller</summary>
        /// <param name="customerId">Id of the Customer</param>
        /// <param name="subscriptionId">Id of the subscription,
        /// which is unique for a customer</param>
        public virtual ActivateRequest Activate(string customerId, string subscriptionId)
        {
            return new ActivateRequest(service, customerId, subscriptionId);
        }

        /// <summary>Activates a subscription previously suspended by the reseller</summary>
        public class ActivateRequest : ResellerBaseServiceRequest<Google.Apis.Reseller.v1sandbox.Data.Subscription>
        {
            /// <summary>Constructs a new Activate request.</summary>
            public ActivateRequest(Google.Apis.Services.IClientService service, string customerId, string subscriptionId)
                : base(service)
            {
                CustomerId = customerId;
                SubscriptionId = subscriptionId;
                InitParameters();
            }


            /// <summary>Id of the Customer</summary>
            [Google.Apis.Util.RequestParameterAttribute("customerId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string CustomerId { get; private set; }

            /// <summary>Id of the subscription, which is unique for a customer</summary>
            [Google.Apis.Util.RequestParameterAttribute("subscriptionId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string SubscriptionId { get; private set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "activate"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "POST"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "customers/{customerId}/subscriptions/{subscriptionId}/activate"; }
            }

            /// <summary>Initializes Activate parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "customerId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "customerId",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
                RequestParameters.Add(
                    "subscriptionId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "subscriptionId",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }

        /// <summary>Changes the plan of a subscription</summary>
        /// <param name="body">The body of the request.</param>
        /// <param name="customerId">Id of the Customer</param>
        /// <param name="subscriptionId">Id of the subscription,
        /// which is unique for a customer</param>
        public virtual ChangePlanRequest ChangePlan(Google.Apis.Reseller.v1sandbox.Data.ChangePlanRequest body, string customerId, string subscriptionId)
        {
            return new ChangePlanRequest(service, body, customerId, subscriptionId);
        }

        /// <summary>Changes the plan of a subscription</summary>
        public class ChangePlanRequest : ResellerBaseServiceRequest<Google.Apis.Reseller.v1sandbox.Data.Subscription>
        {
            /// <summary>Constructs a new ChangePlan request.</summary>
            public ChangePlanRequest(Google.Apis.Services.IClientService service, Google.Apis.Reseller.v1sandbox.Data.ChangePlanRequest body, string customerId, string subscriptionId)
                : base(service)
            {
                CustomerId = customerId;
                SubscriptionId = subscriptionId;
                Body = body;
                InitParameters();
            }


            /// <summary>Id of the Customer</summary>
            [Google.Apis.Util.RequestParameterAttribute("customerId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string CustomerId { get; private set; }

            /// <summary>Id of the subscription, which is unique for a customer</summary>
            [Google.Apis.Util.RequestParameterAttribute("subscriptionId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string SubscriptionId { get; private set; }


            /// <summary>Gets or sets the body of this request.</summary>
            Google.Apis.Reseller.v1sandbox.Data.ChangePlanRequest Body { get; set; }

            ///<summary>Returns the body of the request.</summary>
            protected override object GetBody() { return Body; }

            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "changePlan"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "POST"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "customers/{customerId}/subscriptions/{subscriptionId}/changePlan"; }
            }

            /// <summary>Initializes ChangePlan parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "customerId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "customerId",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
                RequestParameters.Add(
                    "subscriptionId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "subscriptionId",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }

        /// <summary>Changes the renewal settings of a subscription</summary>
        /// <param name="body">The body of the request.</param>
        /// <param name="customerId">Id of the Customer</param>
        /// <param name="subscriptionId">Id of the subscription,
        /// which is unique for a customer</param>
        public virtual ChangeRenewalSettingsRequest ChangeRenewalSettings(Google.Apis.Reseller.v1sandbox.Data.RenewalSettings body, string customerId, string subscriptionId)
        {
            return new ChangeRenewalSettingsRequest(service, body, customerId, subscriptionId);
        }

        /// <summary>Changes the renewal settings of a subscription</summary>
        public class ChangeRenewalSettingsRequest : ResellerBaseServiceRequest<Google.Apis.Reseller.v1sandbox.Data.Subscription>
        {
            /// <summary>Constructs a new ChangeRenewalSettings request.</summary>
            public ChangeRenewalSettingsRequest(Google.Apis.Services.IClientService service, Google.Apis.Reseller.v1sandbox.Data.RenewalSettings body, string customerId, string subscriptionId)
                : base(service)
            {
                CustomerId = customerId;
                SubscriptionId = subscriptionId;
                Body = body;
                InitParameters();
            }


            /// <summary>Id of the Customer</summary>
            [Google.Apis.Util.RequestParameterAttribute("customerId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string CustomerId { get; private set; }

            /// <summary>Id of the subscription, which is unique for a customer</summary>
            [Google.Apis.Util.RequestParameterAttribute("subscriptionId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string SubscriptionId { get; private set; }


            /// <summary>Gets or sets the body of this request.</summary>
            Google.Apis.Reseller.v1sandbox.Data.RenewalSettings Body { get; set; }

            ///<summary>Returns the body of the request.</summary>
            protected override object GetBody() { return Body; }

            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "changeRenewalSettings"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "POST"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "customers/{customerId}/subscriptions/{subscriptionId}/changeRenewalSettings"; }
            }

            /// <summary>Initializes ChangeRenewalSettings parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "customerId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "customerId",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
                RequestParameters.Add(
                    "subscriptionId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "subscriptionId",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }

        /// <summary>Changes the seats configuration of a subscription</summary>
        /// <param name="body">The body of the request.</param>
        /// <param name="customerId">Id of the Customer</param>
        /// <param name="subscriptionId">Id of the subscription,
        /// which is unique for a customer</param>
        public virtual ChangeSeatsRequest ChangeSeats(Google.Apis.Reseller.v1sandbox.Data.Seats body, string customerId, string subscriptionId)
        {
            return new ChangeSeatsRequest(service, body, customerId, subscriptionId);
        }

        /// <summary>Changes the seats configuration of a subscription</summary>
        public class ChangeSeatsRequest : ResellerBaseServiceRequest<Google.Apis.Reseller.v1sandbox.Data.Subscription>
        {
            /// <summary>Constructs a new ChangeSeats request.</summary>
            public ChangeSeatsRequest(Google.Apis.Services.IClientService service, Google.Apis.Reseller.v1sandbox.Data.Seats body, string customerId, string subscriptionId)
                : base(service)
            {
                CustomerId = customerId;
                SubscriptionId = subscriptionId;
                Body = body;
                InitParameters();
            }


            /// <summary>Id of the Customer</summary>
            [Google.Apis.Util.RequestParameterAttribute("customerId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string CustomerId { get; private set; }

            /// <summary>Id of the subscription, which is unique for a customer</summary>
            [Google.Apis.Util.RequestParameterAttribute("subscriptionId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string SubscriptionId { get; private set; }


            /// <summary>Gets or sets the body of this request.</summary>
            Google.Apis.Reseller.v1sandbox.Data.Seats Body { get; set; }

            ///<summary>Returns the body of the request.</summary>
            protected override object GetBody() { return Body; }

            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "changeSeats"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "POST"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "customers/{customerId}/subscriptions/{subscriptionId}/changeSeats"; }
            }

            /// <summary>Initializes ChangeSeats parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "customerId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "customerId",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
                RequestParameters.Add(
                    "subscriptionId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "subscriptionId",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }

        /// <summary>Cancels/Downgrades a subscription.</summary>
        /// <param name="customerId">Id of the Customer</param>
        /// <param name="subscriptionId">Id of the subscription,
        /// which is unique for a customer</param>
        /// <param name="deletionType">Whether the subscription is to be fully
        /// cancelled or downgraded</param>
        public virtual DeleteRequest Delete(string customerId, string subscriptionId, DeleteRequest.DeletionTypeEnum deletionType)
        {
            return new DeleteRequest(service, customerId, subscriptionId, deletionType);
        }

        /// <summary>Cancels/Downgrades a subscription.</summary>
        public class DeleteRequest : ResellerBaseServiceRequest<string>
        {
            /// <summary>Constructs a new Delete request.</summary>
            public DeleteRequest(Google.Apis.Services.IClientService service, string customerId, string subscriptionId, DeleteRequest.DeletionTypeEnum deletionType)
                : base(service)
            {
                CustomerId = customerId;
                SubscriptionId = subscriptionId;
                DeletionType = deletionType;
                InitParameters();
            }


            /// <summary>Id of the Customer</summary>
            [Google.Apis.Util.RequestParameterAttribute("customerId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string CustomerId { get; private set; }

            /// <summary>Id of the subscription, which is unique for a customer</summary>
            [Google.Apis.Util.RequestParameterAttribute("subscriptionId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string SubscriptionId { get; private set; }

            /// <summary>Whether the subscription is to be fully cancelled or downgraded</summary>
            [Google.Apis.Util.RequestParameterAttribute("deletionType", Google.Apis.Util.RequestParameterType.Query)]
            public virtual DeletionTypeEnum DeletionType { get; private set; }

            /// <summary>Whether the subscription is to be fully cancelled or downgraded</summary>
            public enum DeletionTypeEnum
            {
                /// <summary>Cancels the subscription immediately</summary>
                [Google.Apis.Util.StringValueAttribute("cancel")]
                Cancel,
                /// <summary>Downgrades a Google Apps for Business subscription to Google Apps</summary>
                [Google.Apis.Util.StringValueAttribute("downgrade")]
                Downgrade,
                /// <summary>Suspends the subscriptions for 4 days before cancelling it</summary>
                [Google.Apis.Util.StringValueAttribute("suspend")]
                Suspend,
                /// <summary>Transfers a subscription directly to Google</summary>
                [Google.Apis.Util.StringValueAttribute("transfer_to_direct")]
                TransferToDirect,
            }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "delete"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "DELETE"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "customers/{customerId}/subscriptions/{subscriptionId}"; }
            }

            /// <summary>Initializes Delete parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "customerId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "customerId",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
                RequestParameters.Add(
                    "subscriptionId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "subscriptionId",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
                RequestParameters.Add(
                    "deletionType", new Google.Apis.Discovery.Parameter
                    {
                        Name = "deletionType",
                        IsRequired = true,
                        ParameterType = "query",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }

        /// <summary>Gets a subscription of the customer.</summary>
        /// <param name="customerId">Id of the Customer</param>
        /// <param name="subscriptionId">Id of the subscription,
        /// which is unique for a customer</param>
        public virtual GetRequest Get(string customerId, string subscriptionId)
        {
            return new GetRequest(service, customerId, subscriptionId);
        }

        /// <summary>Gets a subscription of the customer.</summary>
        public class GetRequest : ResellerBaseServiceRequest<Google.Apis.Reseller.v1sandbox.Data.Subscription>
        {
            /// <summary>Constructs a new Get request.</summary>
            public GetRequest(Google.Apis.Services.IClientService service, string customerId, string subscriptionId)
                : base(service)
            {
                CustomerId = customerId;
                SubscriptionId = subscriptionId;
                InitParameters();
            }


            /// <summary>Id of the Customer</summary>
            [Google.Apis.Util.RequestParameterAttribute("customerId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string CustomerId { get; private set; }

            /// <summary>Id of the subscription, which is unique for a customer</summary>
            [Google.Apis.Util.RequestParameterAttribute("subscriptionId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string SubscriptionId { get; private set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "get"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "GET"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "customers/{customerId}/subscriptions/{subscriptionId}"; }
            }

            /// <summary>Initializes Get parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "customerId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "customerId",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
                RequestParameters.Add(
                    "subscriptionId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "subscriptionId",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }

        /// <summary>Creates/Transfers a subscription for the customer.</summary>
        /// <param name="body">The body of the request.</param>
        /// <param name="customerId">Id of the Customer</param>
        public virtual InsertRequest Insert(Google.Apis.Reseller.v1sandbox.Data.Subscription body, string customerId)
        {
            return new InsertRequest(service, body, customerId);
        }

        /// <summary>Creates/Transfers a subscription for the customer.</summary>
        public class InsertRequest : ResellerBaseServiceRequest<Google.Apis.Reseller.v1sandbox.Data.Subscription>
        {
            /// <summary>Constructs a new Insert request.</summary>
            public InsertRequest(Google.Apis.Services.IClientService service, Google.Apis.Reseller.v1sandbox.Data.Subscription body, string customerId)
                : base(service)
            {
                CustomerId = customerId;
                Body = body;
                InitParameters();
            }


            /// <summary>Id of the Customer</summary>
            [Google.Apis.Util.RequestParameterAttribute("customerId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string CustomerId { get; private set; }

            /// <summary>An auth token needed for transferring a subscription. Can be generated at
            /// https://www.google.com/a/cpanel/customer-domain/TransferToken. Optional.</summary>
            [Google.Apis.Util.RequestParameterAttribute("customerAuthToken", Google.Apis.Util.RequestParameterType.Query)]
            public virtual string CustomerAuthToken { get; set; }


            /// <summary>Gets or sets the body of this request.</summary>
            Google.Apis.Reseller.v1sandbox.Data.Subscription Body { get; set; }

            ///<summary>Returns the body of the request.</summary>
            protected override object GetBody() { return Body; }

            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "insert"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "POST"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "customers/{customerId}/subscriptions"; }
            }

            /// <summary>Initializes Insert parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "customerId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "customerId",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
                RequestParameters.Add(
                    "customerAuthToken", new Google.Apis.Discovery.Parameter
                    {
                        Name = "customerAuthToken",
                        IsRequired = false,
                        ParameterType = "query",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }

        /// <summary>Lists subscriptions of a reseller, optionally filtered by a customer name prefix.</summary>
        public virtual ListRequest List()
        {
            return new ListRequest(service);
        }

        /// <summary>Lists subscriptions of a reseller, optionally filtered by a customer name prefix.</summary>
        public class ListRequest : ResellerBaseServiceRequest<Google.Apis.Reseller.v1sandbox.Data.Subscriptions>
        {
            /// <summary>Constructs a new List request.</summary>
            public ListRequest(Google.Apis.Services.IClientService service)
                : base(service)
            {
                InitParameters();
            }


            /// <summary>An auth token needed if the customer is not a resold customer of this reseller. Can be
            /// generated at https://www.google.com/a/cpanel/customer-domain/TransferToken.Optional.</summary>
            [Google.Apis.Util.RequestParameterAttribute("customerAuthToken", Google.Apis.Util.RequestParameterType.Query)]
            public virtual string CustomerAuthToken { get; set; }

            /// <summary>Id of the Customer</summary>
            [Google.Apis.Util.RequestParameterAttribute("customerId", Google.Apis.Util.RequestParameterType.Query)]
            public virtual string CustomerId { get; set; }

            /// <summary>Prefix of the customer's domain name by which the subscriptions should be filtered.
            /// Optional</summary>
            [Google.Apis.Util.RequestParameterAttribute("customerNamePrefix", Google.Apis.Util.RequestParameterType.Query)]
            public virtual string CustomerNamePrefix { get; set; }

            /// <summary>Maximum number of results to return</summary>
            /// [minimum: 1]
            /// [maximum: 100]
            [Google.Apis.Util.RequestParameterAttribute("maxResults", Google.Apis.Util.RequestParameterType.Query)]
            public virtual System.Nullable<long> MaxResults { get; set; }

            /// <summary>Token to specify next page in the list</summary>
            [Google.Apis.Util.RequestParameterAttribute("pageToken", Google.Apis.Util.RequestParameterType.Query)]
            public virtual string PageToken { get; set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "list"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "GET"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "subscriptions"; }
            }

            /// <summary>Initializes List parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "customerAuthToken", new Google.Apis.Discovery.Parameter
                    {
                        Name = "customerAuthToken",
                        IsRequired = false,
                        ParameterType = "query",
                        DefaultValue = null,
                        Pattern = null,
                    });
                RequestParameters.Add(
                    "customerId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "customerId",
                        IsRequired = false,
                        ParameterType = "query",
                        DefaultValue = null,
                        Pattern = null,
                    });
                RequestParameters.Add(
                    "customerNamePrefix", new Google.Apis.Discovery.Parameter
                    {
                        Name = "customerNamePrefix",
                        IsRequired = false,
                        ParameterType = "query",
                        DefaultValue = null,
                        Pattern = null,
                    });
                RequestParameters.Add(
                    "maxResults", new Google.Apis.Discovery.Parameter
                    {
                        Name = "maxResults",
                        IsRequired = false,
                        ParameterType = "query",
                        DefaultValue = null,
                        Pattern = null,
                    });
                RequestParameters.Add(
                    "pageToken", new Google.Apis.Discovery.Parameter
                    {
                        Name = "pageToken",
                        IsRequired = false,
                        ParameterType = "query",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }

        /// <summary>Starts paid service of a trial subscription</summary>
        /// <param name="customerId">Id of the Customer</param>
        /// <param name="subscriptionId">Id of the subscription,
        /// which is unique for a customer</param>
        public virtual StartPaidServiceRequest StartPaidService(string customerId, string subscriptionId)
        {
            return new StartPaidServiceRequest(service, customerId, subscriptionId);
        }

        /// <summary>Starts paid service of a trial subscription</summary>
        public class StartPaidServiceRequest : ResellerBaseServiceRequest<Google.Apis.Reseller.v1sandbox.Data.Subscription>
        {
            /// <summary>Constructs a new StartPaidService request.</summary>
            public StartPaidServiceRequest(Google.Apis.Services.IClientService service, string customerId, string subscriptionId)
                : base(service)
            {
                CustomerId = customerId;
                SubscriptionId = subscriptionId;
                InitParameters();
            }


            /// <summary>Id of the Customer</summary>
            [Google.Apis.Util.RequestParameterAttribute("customerId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string CustomerId { get; private set; }

            /// <summary>Id of the subscription, which is unique for a customer</summary>
            [Google.Apis.Util.RequestParameterAttribute("subscriptionId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string SubscriptionId { get; private set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "startPaidService"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "POST"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "customers/{customerId}/subscriptions/{subscriptionId}/startPaidService"; }
            }

            /// <summary>Initializes StartPaidService parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "customerId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "customerId",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
                RequestParameters.Add(
                    "subscriptionId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "subscriptionId",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }

        /// <summary>Suspends an active subscription</summary>
        /// <param name="customerId">Id of the Customer</param>
        /// <param name="subscriptionId">Id of the subscription,
        /// which is unique for a customer</param>
        public virtual SuspendRequest Suspend(string customerId, string subscriptionId)
        {
            return new SuspendRequest(service, customerId, subscriptionId);
        }

        /// <summary>Suspends an active subscription</summary>
        public class SuspendRequest : ResellerBaseServiceRequest<Google.Apis.Reseller.v1sandbox.Data.Subscription>
        {
            /// <summary>Constructs a new Suspend request.</summary>
            public SuspendRequest(Google.Apis.Services.IClientService service, string customerId, string subscriptionId)
                : base(service)
            {
                CustomerId = customerId;
                SubscriptionId = subscriptionId;
                InitParameters();
            }


            /// <summary>Id of the Customer</summary>
            [Google.Apis.Util.RequestParameterAttribute("customerId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string CustomerId { get; private set; }

            /// <summary>Id of the subscription, which is unique for a customer</summary>
            [Google.Apis.Util.RequestParameterAttribute("subscriptionId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string SubscriptionId { get; private set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "suspend"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "POST"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "customers/{customerId}/subscriptions/{subscriptionId}/suspend"; }
            }

            /// <summary>Initializes Suspend parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "customerId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "customerId",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
                RequestParameters.Add(
                    "subscriptionId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "subscriptionId",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }
    }
}

namespace Google.Apis.Reseller.v1sandbox.Data
{    

    /// <summary>JSON template for address of a customer.</summary>
    public class Address : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Address line 1 of the address.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("addressLine1")]
        public virtual string AddressLine1 { get; set; } 

        /// <summary>Address line 2 of the address.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("addressLine2")]
        public virtual string AddressLine2 { get; set; } 

        /// <summary>Address line 3 of the address.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("addressLine3")]
        public virtual string AddressLine3 { get; set; } 

        /// <summary>Name of the contact person.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("contactName")]
        public virtual string ContactName { get; set; } 

        /// <summary>ISO 3166 country code.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("countryCode")]
        public virtual string CountryCode { get; set; } 

        /// <summary>Identifies the resource as a customer address.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind { get; set; } 

        /// <summary>Name of the locality. This is in accordance with - http://portablecontacts.net/draft-
        /// spec.html#address_element.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("locality")]
        public virtual string Locality { get; set; } 

        /// <summary>Name of the organization.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("organizationName")]
        public virtual string OrganizationName { get; set; } 

        /// <summary>The postal code. This is in accordance with - http://portablecontacts.net/draft-
        /// spec.html#address_element.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("postalCode")]
        public virtual string PostalCode { get; set; } 

        /// <summary>Name of the region. This is in accordance with - http://portablecontacts.net/draft-
        /// spec.html#address_element.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("region")]
        public virtual string Region { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>JSON template for the ChangePlan rpc request.</summary>
    public class ChangePlanRequest : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>External name of the deal code applicable for the subscription. This field is optional. If missing,
        /// the deal price plan won't be used.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("dealCode")]
        public virtual string DealCode { get; set; } 

        /// <summary>Identifies the resource as a subscription change plan request.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind { get; set; } 

        /// <summary>Name of the plan to change to.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("planName")]
        public virtual string PlanName { get; set; } 

        /// <summary>Purchase order id for your order tracking purposes.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("purchaseOrderId")]
        public virtual string PurchaseOrderId { get; set; } 

        /// <summary>Number/Limit of seats in the new plan.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("seats")]
        public virtual Seats Seats { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>JSON template for a customer.</summary>
    public class Customer : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The alternate email of the customer.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("alternateEmail")]
        public virtual string AlternateEmail { get; set; } 

        /// <summary>The domain name of the customer.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("customerDomain")]
        public virtual string CustomerDomain { get; set; } 

        /// <summary>Whether the customer's primary domain has been verified.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("customerDomainVerified")]
        public virtual System.Nullable<bool> CustomerDomainVerified { get; set; } 

        /// <summary>The id of the customer.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("customerId")]
        public virtual string CustomerId { get; set; } 

        /// <summary>Identifies the resource as a customer.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind { get; set; } 

        /// <summary>The phone number of the customer.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("phoneNumber")]
        public virtual string PhoneNumber { get; set; } 

        /// <summary>The postal address of the customer.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("postalAddress")]
        public virtual Address PostalAddress { get; set; } 

        /// <summary>Ui url for customer resource.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("resourceUiUrl")]
        public virtual string ResourceUiUrl { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>JSON template for a subscription renewal settings.</summary>
    public class RenewalSettings : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Identifies the resource as a subscription renewal setting.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind { get; set; } 

        /// <summary>Subscription renewal type.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("renewalType")]
        public virtual string RenewalType { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>JSON template for subscription seats.</summary>
    public class Seats : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Identifies the resource as a subscription change plan request.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind { get; set; } 

        /// <summary>Read-only field containing the current number of licensed seats for FLEXIBLE Google-Apps
        /// subscriptions and secondary subscriptions such as Google-Vault and Drive-storage.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("licensedNumberOfSeats")]
        public virtual System.Nullable<int> LicensedNumberOfSeats { get; set; } 

        /// <summary>Maximum number of seats that can be purchased. This needs to be provided only for a non-commitment
        /// plan. For a commitment plan it is decided by the contract.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("maximumNumberOfSeats")]
        public virtual System.Nullable<int> MaximumNumberOfSeats { get; set; } 

        /// <summary>Number of seats to purchase. This is applicable only for a commitment plan.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("numberOfSeats")]
        public virtual System.Nullable<int> NumberOfSeats { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>JSON template for a subscription.</summary>
    public class Subscription : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Billing method of this subscription.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("billingMethod")]
        public virtual string BillingMethod { get; set; } 

        /// <summary>Creation time of this subscription in milliseconds since Unix epoch.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("creationTime")]
        public virtual System.Nullable<long> CreationTime { get; set; } 

        /// <summary>Primary domain name of the customer</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("customerDomain")]
        public virtual string CustomerDomain { get; set; } 

        /// <summary>The id of the customer to whom the subscription belongs.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("customerId")]
        public virtual string CustomerId { get; set; } 

        /// <summary>External name of the deal, if this subscription was provisioned under one. Otherwise this field
        /// will be empty.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("dealCode")]
        public virtual string DealCode { get; set; } 

        /// <summary>Identifies the resource as a Subscription.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind { get; set; } 

        /// <summary>Plan details of the subscription</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("plan")]
        public virtual Subscription.PlanData Plan { get; set; } 

        /// <summary>Purchase order id for your order tracking purposes.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("purchaseOrderId")]
        public virtual string PurchaseOrderId { get; set; } 

        /// <summary>Renewal settings of the subscription.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("renewalSettings")]
        public virtual RenewalSettings RenewalSettings { get; set; } 

        /// <summary>Ui url for subscription resource.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("resourceUiUrl")]
        public virtual string ResourceUiUrl { get; set; } 

        /// <summary>Number/Limit of seats in the new plan.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("seats")]
        public virtual Seats Seats { get; set; } 

        /// <summary>Name of the sku for which this subscription is purchased.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("skuId")]
        public virtual string SkuId { get; set; } 

        /// <summary>Status of the subscription.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("status")]
        public virtual string Status { get; set; } 

        /// <summary>The id of the subscription.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("subscriptionId")]
        public virtual string SubscriptionId { get; set; } 

        /// <summary>Read-only field containing an enumerable of all the current suspension reasons for a subscription.
        /// It is possible for a subscription to have many concurrent, overlapping suspension reasons. A subscription's
        /// STATUS is SUSPENDED until all pending suspensions are removed. Possible options include: -
        /// PENDING_TOS_ACCEPTANCE - The customer has not logged in and accepted the Google Apps Resold Terms of
        /// Services. - RENEWAL_WITH_TYPE_CANCEL - The customer's commitment ended and their service was cancelled at
        /// the end of their term. - RESELLER_INITIATED - A manual suspension invoked by a Reseller. - TRIAL_ENDED - The
        /// customer's trial expired without a plan selected. - OTHER - The customer is suspended for an internal Google
        /// reason (e.g. abuse or otherwise).</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("suspensionReasons")]
        public virtual System.Collections.Generic.IList<string> SuspensionReasons { get; set; } 

        /// <summary>Transfer related information for the subscription.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("transferInfo")]
        public virtual Subscription.TransferInfoData TransferInfo { get; set; } 

        /// <summary>Trial Settings of the subscription.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("trialSettings")]
        public virtual Subscription.TrialSettingsData TrialSettings { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
        

        /// <summary>Plan details of the subscription</summary>
        public class PlanData
        {
            /// <summary>Interval of the commitment if it is a commitment plan.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("commitmentInterval")]
            public virtual PlanData.CommitmentIntervalData CommitmentInterval { get; set; } 

            /// <summary>Whether the plan is a commitment plan or not.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("isCommitmentPlan")]
            public virtual System.Nullable<bool> IsCommitmentPlan { get; set; } 

            /// <summary>The plan name of this subscription's plan.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("planName")]
            public virtual string PlanName { get; set; } 

            

            /// <summary>Interval of the commitment if it is a commitment plan.</summary>
            public class CommitmentIntervalData
            {
                /// <summary>End time of the commitment interval in milliseconds since Unix epoch.</summary>
                [Newtonsoft.Json.JsonPropertyAttribute("endTime")]
                public virtual System.Nullable<long> EndTime { get; set; } 

                /// <summary>Start time of the commitment interval in milliseconds since Unix epoch.</summary>
                [Newtonsoft.Json.JsonPropertyAttribute("startTime")]
                public virtual System.Nullable<long> StartTime { get; set; } 

            }
        }    

        /// <summary>Transfer related information for the subscription.</summary>
        public class TransferInfoData
        {
            [Newtonsoft.Json.JsonPropertyAttribute("minimumTransferableSeats")]
            public virtual System.Nullable<int> MinimumTransferableSeats { get; set; } 

            /// <summary>Time when transfer token or intent to transfer will expire.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("transferabilityExpirationTime")]
            public virtual System.Nullable<long> TransferabilityExpirationTime { get; set; } 

        }    

        /// <summary>Trial Settings of the subscription.</summary>
        public class TrialSettingsData
        {
            /// <summary>Whether the subscription is in trial.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("isInTrial")]
            public virtual System.Nullable<bool> IsInTrial { get; set; } 

            /// <summary>End time of the trial in milliseconds since Unix epoch.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("trialEndTime")]
            public virtual System.Nullable<long> TrialEndTime { get; set; } 

        }
    }    

    /// <summary>JSON template for a subscription list.</summary>
    public class Subscriptions : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Identifies the resource as a collection of subscriptions.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind { get; set; } 

        /// <summary>The continuation token, used to page through large result sets. Provide this value in a subsequent
        /// request to return the next page of results.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("nextPageToken")]
        public virtual string NextPageToken { get; set; } 

        /// <summary>The subscriptions in this page of results.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("subscriptions")]
        public virtual System.Collections.Generic.IList<Subscription> SubscriptionsValue { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }
}
