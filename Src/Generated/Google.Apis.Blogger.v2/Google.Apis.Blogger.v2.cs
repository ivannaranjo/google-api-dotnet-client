// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by google-apis-code-generator 1.5.1
//     C# generator version: 1.14.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

/**
 * \brief
 *   Blogger API Version v2
 *
 * \section ApiInfo API Version Information
 *    <table>
 *      <tr><th>API
 *          <td><a href='https://developers.google.com/blogger/docs/2.0/json/getting_started'>Blogger API</a>
 *      <tr><th>API Version<td>v2
 *      <tr><th>API Rev<td>20150422 (111)
 *      <tr><th>API Docs
 *          <td><a href='https://developers.google.com/blogger/docs/2.0/json/getting_started'>
 *              https://developers.google.com/blogger/docs/2.0/json/getting_started</a>
 *      <tr><th>Discovery Name<td>blogger
 *    </table>
 *
 * \section ForMoreInfo For More Information
 *
 * The complete API documentation for using Blogger API can be found at
 * <a href='https://developers.google.com/blogger/docs/2.0/json/getting_started'>https://developers.google.com/blogger/docs/2.0/json/getting_started</a>.
 *
 * For more information about the Google APIs Client Library for .NET, see
 * <a href='https://developers.google.com/api-client-library/dotnet/get_started'>
 * https://developers.google.com/api-client-library/dotnet/get_started</a>
 */

namespace Google.Apis.Blogger.v2
{
    /// <summary>The Blogger Service.</summary>
    public class BloggerService : Google.Apis.Services.BaseClientService
    {
        /// <summary>The API version.</summary>
        public const string Version = "v2";

        /// <summary>The discovery version used to generate this service.</summary>
        public static Google.Apis.Discovery.DiscoveryVersion DiscoveryVersionUsed =
            Google.Apis.Discovery.DiscoveryVersion.Version_1_0;

        /// <summary>Constructs a new service.</summary>
        public BloggerService() :
            this(new Google.Apis.Services.BaseClientService.Initializer()) {}

        /// <summary>Constructs a new service.</summary>
        /// <param name="initializer">The service initializer.</param>
        public BloggerService(Google.Apis.Services.BaseClientService.Initializer initializer)
            : base(initializer)
        {
            blogs = new BlogsResource(this);
            comments = new CommentsResource(this);
            pages = new PagesResource(this);
            posts = new PostsResource(this);
            users = new UsersResource(this);
        }

        /// <summary>Gets the service supported features.</summary>
        public override System.Collections.Generic.IList<string> Features
        {
            get { return new string[0]; }
        }

        /// <summary>Gets the service name.</summary>
        public override string Name
        {
            get { return "blogger"; }
        }

        /// <summary>Gets the service base URI.</summary>
        public override string BaseUri
        {
            get { return "https://www.googleapis.com/blogger/v2/"; }
        }

        /// <summary>Gets the service base path.</summary>
        public override string BasePath
        {
            get { return "blogger/v2/"; }
        }

        /// <summary>Available OAuth 2.0 scopes for use with the Blogger API.</summary>
        public class Scope
        {
            /// <summary>Manage your Blogger account</summary>
            public static string Blogger = "https://www.googleapis.com/auth/blogger";

        }



        private readonly BlogsResource blogs;

        /// <summary>Gets the Blogs resource.</summary>
        public virtual BlogsResource Blogs
        {
            get { return blogs; }
        }

        private readonly CommentsResource comments;

        /// <summary>Gets the Comments resource.</summary>
        public virtual CommentsResource Comments
        {
            get { return comments; }
        }

        private readonly PagesResource pages;

        /// <summary>Gets the Pages resource.</summary>
        public virtual PagesResource Pages
        {
            get { return pages; }
        }

        private readonly PostsResource posts;

        /// <summary>Gets the Posts resource.</summary>
        public virtual PostsResource Posts
        {
            get { return posts; }
        }

        private readonly UsersResource users;

        /// <summary>Gets the Users resource.</summary>
        public virtual UsersResource Users
        {
            get { return users; }
        }
    }

    ///<summary>A base abstract class for Blogger requests.</summary>
    public abstract class BloggerBaseServiceRequest<TResponse> : Google.Apis.Requests.ClientServiceRequest<TResponse>
    {
        ///<summary>Constructs a new BloggerBaseServiceRequest instance.</summary>
        protected BloggerBaseServiceRequest(Google.Apis.Services.IClientService service)
            : base(service)
        {
        }

        /// <summary>Data format for the response.</summary>
        /// [default: json]
        [Google.Apis.Util.RequestParameterAttribute("alt", Google.Apis.Util.RequestParameterType.Query)]
        public virtual System.Nullable<AltEnum> Alt { get; set; }

        /// <summary>Data format for the response.</summary>
        public enum AltEnum
        {
            /// <summary>Responses with Content-Type of application/json</summary>
            [Google.Apis.Util.StringValueAttribute("json")]
            Json,
        }

        /// <summary>Selector specifying which fields to include in a partial response.</summary>
        [Google.Apis.Util.RequestParameterAttribute("fields", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string Fields { get; set; }

        /// <summary>API key. Your API key identifies your project and provides you with API access, quota, and reports.
        /// Required unless you provide an OAuth 2.0 token.</summary>
        [Google.Apis.Util.RequestParameterAttribute("key", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string Key { get; set; }

        /// <summary>OAuth 2.0 token for the current user.</summary>
        [Google.Apis.Util.RequestParameterAttribute("oauth_token", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string OauthToken { get; set; }

        /// <summary>Returns response with indentations and line breaks.</summary>
        /// [default: true]
        [Google.Apis.Util.RequestParameterAttribute("prettyPrint", Google.Apis.Util.RequestParameterType.Query)]
        public virtual System.Nullable<bool> PrettyPrint { get; set; }

        /// <summary>Available to use for quota purposes for server-side applications. Can be any arbitrary string
        /// assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.</summary>
        [Google.Apis.Util.RequestParameterAttribute("quotaUser", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string QuotaUser { get; set; }

        /// <summary>IP address of the site where the request originates. Use this if you want to enforce per-user
        /// limits.</summary>
        [Google.Apis.Util.RequestParameterAttribute("userIp", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string UserIp { get; set; }

        /// <summary>Initializes Blogger parameter list.</summary>
        protected override void InitParameters()
        {
            base.InitParameters();

            RequestParameters.Add(
                "alt", new Google.Apis.Discovery.Parameter
                {
                    Name = "alt",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = "json",
                    Pattern = null,
                });
            RequestParameters.Add(
                "fields", new Google.Apis.Discovery.Parameter
                {
                    Name = "fields",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "key", new Google.Apis.Discovery.Parameter
                {
                    Name = "key",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "oauth_token", new Google.Apis.Discovery.Parameter
                {
                    Name = "oauth_token",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "prettyPrint", new Google.Apis.Discovery.Parameter
                {
                    Name = "prettyPrint",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = "true",
                    Pattern = null,
                });
            RequestParameters.Add(
                "quotaUser", new Google.Apis.Discovery.Parameter
                {
                    Name = "quotaUser",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "userIp", new Google.Apis.Discovery.Parameter
                {
                    Name = "userIp",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
        }
    }

    /// <summary>The "blogs" collection of methods.</summary>
    public class BlogsResource
    {
        private const string Resource = "blogs";

        /// <summary>The service which this resource belongs to.</summary>
        private readonly Google.Apis.Services.IClientService service;

        /// <summary>Constructs a new resource.</summary>
        public BlogsResource(Google.Apis.Services.IClientService service)
        {
            this.service = service;

        }


        /// <summary>Gets one blog by id.</summary>
        /// <param name="blogId">The ID of the blog to get.</param>
        public virtual GetRequest Get(string blogId)
        {
            return new GetRequest(service, blogId);
        }

        /// <summary>Gets one blog by id.</summary>
        public class GetRequest : BloggerBaseServiceRequest<Google.Apis.Blogger.v2.Data.Blog>
        {
            /// <summary>Constructs a new Get request.</summary>
            public GetRequest(Google.Apis.Services.IClientService service, string blogId)
                : base(service)
            {
                BlogId = blogId;
                InitParameters();
            }


            /// <summary>The ID of the blog to get.</summary>
            [Google.Apis.Util.RequestParameterAttribute("blogId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string BlogId { get; private set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "get"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "GET"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "blogs/{blogId}"; }
            }

            /// <summary>Initializes Get parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "blogId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "blogId",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }
    }

    /// <summary>The "comments" collection of methods.</summary>
    public class CommentsResource
    {
        private const string Resource = "comments";

        /// <summary>The service which this resource belongs to.</summary>
        private readonly Google.Apis.Services.IClientService service;

        /// <summary>Constructs a new resource.</summary>
        public CommentsResource(Google.Apis.Services.IClientService service)
        {
            this.service = service;

        }


        /// <summary>Gets one comment by id.</summary>
        /// <param name="blogId">ID of the blog to containing the comment.</param>
        /// <param name="postId">ID of the post
        /// to fetch posts from.</param>
        /// <param name="commentId">The ID of the comment to get.</param>
        public virtual GetRequest Get(string blogId, string postId, string commentId)
        {
            return new GetRequest(service, blogId, postId, commentId);
        }

        /// <summary>Gets one comment by id.</summary>
        public class GetRequest : BloggerBaseServiceRequest<Google.Apis.Blogger.v2.Data.Comment>
        {
            /// <summary>Constructs a new Get request.</summary>
            public GetRequest(Google.Apis.Services.IClientService service, string blogId, string postId, string commentId)
                : base(service)
            {
                BlogId = blogId;
                PostId = postId;
                CommentId = commentId;
                InitParameters();
            }


            /// <summary>ID of the blog to containing the comment.</summary>
            [Google.Apis.Util.RequestParameterAttribute("blogId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string BlogId { get; private set; }

            /// <summary>ID of the post to fetch posts from.</summary>
            [Google.Apis.Util.RequestParameterAttribute("postId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string PostId { get; private set; }

            /// <summary>The ID of the comment to get.</summary>
            [Google.Apis.Util.RequestParameterAttribute("commentId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string CommentId { get; private set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "get"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "GET"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "blogs/{blogId}/posts/{postId}/comments/{commentId}"; }
            }

            /// <summary>Initializes Get parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "blogId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "blogId",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
                RequestParameters.Add(
                    "postId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "postId",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
                RequestParameters.Add(
                    "commentId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "commentId",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }

        /// <summary>Retrieves the comments for a blog, possibly filtered.</summary>
        /// <param name="blogId">ID of the blog to fetch comments from.</param>
        /// <param name="postId">ID of the post to
        /// fetch posts from.</param>
        public virtual ListRequest List(string blogId, string postId)
        {
            return new ListRequest(service, blogId, postId);
        }

        /// <summary>Retrieves the comments for a blog, possibly filtered.</summary>
        public class ListRequest : BloggerBaseServiceRequest<Google.Apis.Blogger.v2.Data.CommentList>
        {
            /// <summary>Constructs a new List request.</summary>
            public ListRequest(Google.Apis.Services.IClientService service, string blogId, string postId)
                : base(service)
            {
                BlogId = blogId;
                PostId = postId;
                InitParameters();
            }


            /// <summary>ID of the blog to fetch comments from.</summary>
            [Google.Apis.Util.RequestParameterAttribute("blogId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string BlogId { get; private set; }

            /// <summary>ID of the post to fetch posts from.</summary>
            [Google.Apis.Util.RequestParameterAttribute("postId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string PostId { get; private set; }

            /// <summary>Whether the body content of the comments is included.</summary>
            [Google.Apis.Util.RequestParameterAttribute("fetchBodies", Google.Apis.Util.RequestParameterType.Query)]
            public virtual System.Nullable<bool> FetchBodies { get; set; }

            /// <summary>Maximum number of comments to include in the result.</summary>
            [Google.Apis.Util.RequestParameterAttribute("maxResults", Google.Apis.Util.RequestParameterType.Query)]
            public virtual System.Nullable<long> MaxResults { get; set; }

            /// <summary>Continuation token if request is paged.</summary>
            [Google.Apis.Util.RequestParameterAttribute("pageToken", Google.Apis.Util.RequestParameterType.Query)]
            public virtual string PageToken { get; set; }

            /// <summary>Earliest date of comment to fetch, a date-time with RFC 3339 formatting.</summary>
            [Google.Apis.Util.RequestParameterAttribute("startDate", Google.Apis.Util.RequestParameterType.Query)]
            public virtual System.Nullable<System.DateTime> StartDate { get; set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "list"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "GET"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "blogs/{blogId}/posts/{postId}/comments"; }
            }

            /// <summary>Initializes List parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "blogId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "blogId",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
                RequestParameters.Add(
                    "postId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "postId",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
                RequestParameters.Add(
                    "fetchBodies", new Google.Apis.Discovery.Parameter
                    {
                        Name = "fetchBodies",
                        IsRequired = false,
                        ParameterType = "query",
                        DefaultValue = null,
                        Pattern = null,
                    });
                RequestParameters.Add(
                    "maxResults", new Google.Apis.Discovery.Parameter
                    {
                        Name = "maxResults",
                        IsRequired = false,
                        ParameterType = "query",
                        DefaultValue = null,
                        Pattern = null,
                    });
                RequestParameters.Add(
                    "pageToken", new Google.Apis.Discovery.Parameter
                    {
                        Name = "pageToken",
                        IsRequired = false,
                        ParameterType = "query",
                        DefaultValue = null,
                        Pattern = null,
                    });
                RequestParameters.Add(
                    "startDate", new Google.Apis.Discovery.Parameter
                    {
                        Name = "startDate",
                        IsRequired = false,
                        ParameterType = "query",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }
    }

    /// <summary>The "pages" collection of methods.</summary>
    public class PagesResource
    {
        private const string Resource = "pages";

        /// <summary>The service which this resource belongs to.</summary>
        private readonly Google.Apis.Services.IClientService service;

        /// <summary>Constructs a new resource.</summary>
        public PagesResource(Google.Apis.Services.IClientService service)
        {
            this.service = service;

        }


        /// <summary>Gets one blog page by id.</summary>
        /// <param name="blogId">ID of the blog containing the page.</param>
        /// <param name="pageId">The ID of the page to
        /// get.</param>
        public virtual GetRequest Get(string blogId, string pageId)
        {
            return new GetRequest(service, blogId, pageId);
        }

        /// <summary>Gets one blog page by id.</summary>
        public class GetRequest : BloggerBaseServiceRequest<Google.Apis.Blogger.v2.Data.Page>
        {
            /// <summary>Constructs a new Get request.</summary>
            public GetRequest(Google.Apis.Services.IClientService service, string blogId, string pageId)
                : base(service)
            {
                BlogId = blogId;
                PageId = pageId;
                InitParameters();
            }


            /// <summary>ID of the blog containing the page.</summary>
            [Google.Apis.Util.RequestParameterAttribute("blogId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string BlogId { get; private set; }

            /// <summary>The ID of the page to get.</summary>
            [Google.Apis.Util.RequestParameterAttribute("pageId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string PageId { get; private set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "get"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "GET"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "blogs/{blogId}/pages/{pageId}"; }
            }

            /// <summary>Initializes Get parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "blogId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "blogId",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
                RequestParameters.Add(
                    "pageId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "pageId",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }

        /// <summary>Retrieves pages for a blog, possibly filtered.</summary>
        /// <param name="blogId">ID of the blog to fetch pages from.</param>
        public virtual ListRequest List(string blogId)
        {
            return new ListRequest(service, blogId);
        }

        /// <summary>Retrieves pages for a blog, possibly filtered.</summary>
        public class ListRequest : BloggerBaseServiceRequest<Google.Apis.Blogger.v2.Data.PageList>
        {
            /// <summary>Constructs a new List request.</summary>
            public ListRequest(Google.Apis.Services.IClientService service, string blogId)
                : base(service)
            {
                BlogId = blogId;
                InitParameters();
            }


            /// <summary>ID of the blog to fetch pages from.</summary>
            [Google.Apis.Util.RequestParameterAttribute("blogId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string BlogId { get; private set; }

            /// <summary>Whether to retrieve the Page bodies.</summary>
            [Google.Apis.Util.RequestParameterAttribute("fetchBodies", Google.Apis.Util.RequestParameterType.Query)]
            public virtual System.Nullable<bool> FetchBodies { get; set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "list"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "GET"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "blogs/{blogId}/pages"; }
            }

            /// <summary>Initializes List parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "blogId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "blogId",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
                RequestParameters.Add(
                    "fetchBodies", new Google.Apis.Discovery.Parameter
                    {
                        Name = "fetchBodies",
                        IsRequired = false,
                        ParameterType = "query",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }
    }

    /// <summary>The "posts" collection of methods.</summary>
    public class PostsResource
    {
        private const string Resource = "posts";

        /// <summary>The service which this resource belongs to.</summary>
        private readonly Google.Apis.Services.IClientService service;

        /// <summary>Constructs a new resource.</summary>
        public PostsResource(Google.Apis.Services.IClientService service)
        {
            this.service = service;

        }


        /// <summary>Get a post by id.</summary>
        /// <param name="blogId">ID of the blog to fetch the post from.</param>
        /// <param name="postId">The ID of the
        /// post</param>
        public virtual GetRequest Get(string blogId, string postId)
        {
            return new GetRequest(service, blogId, postId);
        }

        /// <summary>Get a post by id.</summary>
        public class GetRequest : BloggerBaseServiceRequest<Google.Apis.Blogger.v2.Data.Post>
        {
            /// <summary>Constructs a new Get request.</summary>
            public GetRequest(Google.Apis.Services.IClientService service, string blogId, string postId)
                : base(service)
            {
                BlogId = blogId;
                PostId = postId;
                InitParameters();
            }


            /// <summary>ID of the blog to fetch the post from.</summary>
            [Google.Apis.Util.RequestParameterAttribute("blogId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string BlogId { get; private set; }

            /// <summary>The ID of the post</summary>
            [Google.Apis.Util.RequestParameterAttribute("postId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string PostId { get; private set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "get"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "GET"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "blogs/{blogId}/posts/{postId}"; }
            }

            /// <summary>Initializes Get parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "blogId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "blogId",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
                RequestParameters.Add(
                    "postId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "postId",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }

        /// <summary>Retrieves a list of posts, possibly filtered.</summary>
        /// <param name="blogId">ID of the blog to fetch posts from.</param>
        public virtual ListRequest List(string blogId)
        {
            return new ListRequest(service, blogId);
        }

        /// <summary>Retrieves a list of posts, possibly filtered.</summary>
        public class ListRequest : BloggerBaseServiceRequest<Google.Apis.Blogger.v2.Data.PostList>
        {
            /// <summary>Constructs a new List request.</summary>
            public ListRequest(Google.Apis.Services.IClientService service, string blogId)
                : base(service)
            {
                BlogId = blogId;
                InitParameters();
            }


            /// <summary>ID of the blog to fetch posts from.</summary>
            [Google.Apis.Util.RequestParameterAttribute("blogId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string BlogId { get; private set; }

            /// <summary>Whether the body content of posts is included.</summary>
            [Google.Apis.Util.RequestParameterAttribute("fetchBodies", Google.Apis.Util.RequestParameterType.Query)]
            public virtual System.Nullable<bool> FetchBodies { get; set; }

            /// <summary>Maximum number of posts to fetch.</summary>
            [Google.Apis.Util.RequestParameterAttribute("maxResults", Google.Apis.Util.RequestParameterType.Query)]
            public virtual System.Nullable<long> MaxResults { get; set; }

            /// <summary>Continuation token if the request is paged.</summary>
            [Google.Apis.Util.RequestParameterAttribute("pageToken", Google.Apis.Util.RequestParameterType.Query)]
            public virtual string PageToken { get; set; }

            /// <summary>Earliest post date to fetch, a date-time with RFC 3339 formatting.</summary>
            [Google.Apis.Util.RequestParameterAttribute("startDate", Google.Apis.Util.RequestParameterType.Query)]
            public virtual System.Nullable<System.DateTime> StartDate { get; set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "list"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "GET"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "blogs/{blogId}/posts"; }
            }

            /// <summary>Initializes List parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "blogId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "blogId",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
                RequestParameters.Add(
                    "fetchBodies", new Google.Apis.Discovery.Parameter
                    {
                        Name = "fetchBodies",
                        IsRequired = false,
                        ParameterType = "query",
                        DefaultValue = null,
                        Pattern = null,
                    });
                RequestParameters.Add(
                    "maxResults", new Google.Apis.Discovery.Parameter
                    {
                        Name = "maxResults",
                        IsRequired = false,
                        ParameterType = "query",
                        DefaultValue = null,
                        Pattern = null,
                    });
                RequestParameters.Add(
                    "pageToken", new Google.Apis.Discovery.Parameter
                    {
                        Name = "pageToken",
                        IsRequired = false,
                        ParameterType = "query",
                        DefaultValue = null,
                        Pattern = null,
                    });
                RequestParameters.Add(
                    "startDate", new Google.Apis.Discovery.Parameter
                    {
                        Name = "startDate",
                        IsRequired = false,
                        ParameterType = "query",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }
    }

    /// <summary>The "users" collection of methods.</summary>
    public class UsersResource
    {
        private const string Resource = "users";

        /// <summary>The service which this resource belongs to.</summary>
        private readonly Google.Apis.Services.IClientService service;

        /// <summary>Constructs a new resource.</summary>
        public UsersResource(Google.Apis.Services.IClientService service)
        {
            this.service = service;
            blogs = new BlogsResource(service);

        }

        private readonly BlogsResource blogs;

        /// <summary>Gets the Blogs resource.</summary>
        public virtual BlogsResource Blogs
        {
            get { return blogs; }
        }

        /// <summary>The "blogs" collection of methods.</summary>
        public class BlogsResource
        {
            private const string Resource = "blogs";

            /// <summary>The service which this resource belongs to.</summary>
            private readonly Google.Apis.Services.IClientService service;

            /// <summary>Constructs a new resource.</summary>
            public BlogsResource(Google.Apis.Services.IClientService service)
            {
                this.service = service;

            }


            /// <summary>Retrieves a list of blogs, possibly filtered.</summary>
            /// <param name="userId">ID of the user whose blogs are to be fetched. Either the word 'self' (sans quote marks) or the
            /// user's profile identifier.</param>
            public virtual ListRequest List(string userId)
            {
                return new ListRequest(service, userId);
            }

            /// <summary>Retrieves a list of blogs, possibly filtered.</summary>
            public class ListRequest : BloggerBaseServiceRequest<Google.Apis.Blogger.v2.Data.BlogList>
            {
                /// <summary>Constructs a new List request.</summary>
                public ListRequest(Google.Apis.Services.IClientService service, string userId)
                    : base(service)
                {
                    UserId = userId;
                    InitParameters();
                }


                /// <summary>ID of the user whose blogs are to be fetched. Either the word 'self' (sans quote marks) or
                /// the user's profile identifier.</summary>
                [Google.Apis.Util.RequestParameterAttribute("userId", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string UserId { get; private set; }


                ///<summary>Gets the method name.</summary>
                public override string MethodName
                {
                    get { return "list"; }
                }

                ///<summary>Gets the HTTP method.</summary>
                public override string HttpMethod
                {
                    get { return "GET"; }
                }

                ///<summary>Gets the REST path.</summary>
                public override string RestPath
                {
                    get { return "users/{userId}/blogs"; }
                }

                /// <summary>Initializes List parameter list.</summary>
                protected override void InitParameters()
                {
                    base.InitParameters();

                    RequestParameters.Add(
                        "userId", new Google.Apis.Discovery.Parameter
                        {
                            Name = "userId",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = null,
                        });
                }

            }
        }

        /// <summary>Gets one user by id.</summary>
        /// <param name="userId">The ID of the user to get.</param>
        public virtual GetRequest Get(string userId)
        {
            return new GetRequest(service, userId);
        }

        /// <summary>Gets one user by id.</summary>
        public class GetRequest : BloggerBaseServiceRequest<Google.Apis.Blogger.v2.Data.User>
        {
            /// <summary>Constructs a new Get request.</summary>
            public GetRequest(Google.Apis.Services.IClientService service, string userId)
                : base(service)
            {
                UserId = userId;
                InitParameters();
            }


            /// <summary>The ID of the user to get.</summary>
            [Google.Apis.Util.RequestParameterAttribute("userId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string UserId { get; private set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "get"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "GET"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "users/{userId}"; }
            }

            /// <summary>Initializes Get parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "userId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "userId",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }
    }
}

namespace Google.Apis.Blogger.v2.Data
{    

    public class Blog : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The description of this blog. This is displayed underneath the title.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("description")]
        public virtual string Description { get; set; } 

        /// <summary>The identifier for this resource.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("id")]
        public virtual System.Nullable<long> Id { get; set; } 

        /// <summary>The kind of this entry. Always blogger#blog</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind { get; set; } 

        /// <summary>The locale this Blog is set to.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("locale")]
        public virtual Blog.LocaleData Locale { get; set; } 

        /// <summary>The name of this blog. This is displayed as the title.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        public virtual string Name { get; set; } 

        /// <summary>The container of pages in this blog.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("pages")]
        public virtual Blog.PagesData Pages { get; set; } 

        /// <summary>The container of posts in this blog.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("posts")]
        public virtual Blog.PostsData Posts { get; set; } 

        /// <summary>RFC 3339 date-time when this blog was published.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("published")]
        public virtual string PublishedRaw { get; set; }

        /// <summary><seealso cref="System.DateTime"/> representation of <see cref="PublishedRaw"/>.</summary>
        [Newtonsoft.Json.JsonIgnore]
        public virtual System.Nullable<System.DateTime> Published
        {
            get
            {
                return Google.Apis.Util.Utilities.GetDateTimeFromString(PublishedRaw);
            }
            set
            {
                PublishedRaw = Google.Apis.Util.Utilities.GetStringFromDateTime(value);
            }
        }

        /// <summary>The API REST URL to fetch this resource from.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("selfLink")]
        public virtual string SelfLink { get; set; } 

        /// <summary>RFC 3339 date-time when this blog was last updated.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("updated")]
        public virtual string UpdatedRaw { get; set; }

        /// <summary><seealso cref="System.DateTime"/> representation of <see cref="UpdatedRaw"/>.</summary>
        [Newtonsoft.Json.JsonIgnore]
        public virtual System.Nullable<System.DateTime> Updated
        {
            get
            {
                return Google.Apis.Util.Utilities.GetDateTimeFromString(UpdatedRaw);
            }
            set
            {
                UpdatedRaw = Google.Apis.Util.Utilities.GetStringFromDateTime(value);
            }
        }

        /// <summary>The URL where this blog is published.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("url")]
        public virtual string Url { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
        

        /// <summary>The locale this Blog is set to.</summary>
        public class LocaleData
        {
            /// <summary>The country this blog's locale is set to.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("country")]
            public virtual string Country { get; set; } 

            /// <summary>The language this blog is authored in.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("language")]
            public virtual string Language { get; set; } 

            /// <summary>The language variant this blog is authored in.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("variant")]
            public virtual string Variant { get; set; } 

        }    

        /// <summary>The container of pages in this blog.</summary>
        public class PagesData
        {
            /// <summary>The URL of the container for pages in this blog.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("selfLink")]
            public virtual string SelfLink { get; set; } 

            /// <summary>The count of pages in this blog.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("totalItems")]
            public virtual System.Nullable<int> TotalItems { get; set; } 

        }    

        /// <summary>The container of posts in this blog.</summary>
        public class PostsData
        {
            /// <summary>The URL of the container for posts in this blog.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("selfLink")]
            public virtual string SelfLink { get; set; } 

            /// <summary>The count of posts in this blog.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("totalItems")]
            public virtual System.Nullable<int> TotalItems { get; set; } 

        }
    }    

    public class BlogList : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The list of Blogs this user has Authorship or Admin rights over.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("items")]
        public virtual System.Collections.Generic.IList<Blog> Items { get; set; } 

        /// <summary>The kind of this entity. Always blogger#blogList</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    public class Comment : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The author of this Comment.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("author")]
        public virtual Comment.AuthorData Author { get; set; } 

        /// <summary>Data about the blog containing this comment.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("blog")]
        public virtual Comment.BlogData Blog { get; set; } 

        /// <summary>The actual content of the comment. May include HTML markup.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("content")]
        public virtual string Content { get; set; } 

        /// <summary>The identifier for this resource.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("id")]
        public virtual System.Nullable<long> Id { get; set; } 

        /// <summary>Data about the comment this is in reply to.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("inReplyTo")]
        public virtual Comment.InReplyToData InReplyTo { get; set; } 

        /// <summary>The kind of this entry. Always blogger#comment</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind { get; set; } 

        /// <summary>Data about the post containing this comment.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("post")]
        public virtual Comment.PostData Post { get; set; } 

        /// <summary>RFC 3339 date-time when this comment was published.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("published")]
        public virtual string PublishedRaw { get; set; }

        /// <summary><seealso cref="System.DateTime"/> representation of <see cref="PublishedRaw"/>.</summary>
        [Newtonsoft.Json.JsonIgnore]
        public virtual System.Nullable<System.DateTime> Published
        {
            get
            {
                return Google.Apis.Util.Utilities.GetDateTimeFromString(PublishedRaw);
            }
            set
            {
                PublishedRaw = Google.Apis.Util.Utilities.GetStringFromDateTime(value);
            }
        }

        /// <summary>The API REST URL to fetch this resource from.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("selfLink")]
        public virtual string SelfLink { get; set; } 

        /// <summary>RFC 3339 date-time when this comment was last updated.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("updated")]
        public virtual string UpdatedRaw { get; set; }

        /// <summary><seealso cref="System.DateTime"/> representation of <see cref="UpdatedRaw"/>.</summary>
        [Newtonsoft.Json.JsonIgnore]
        public virtual System.Nullable<System.DateTime> Updated
        {
            get
            {
                return Google.Apis.Util.Utilities.GetDateTimeFromString(UpdatedRaw);
            }
            set
            {
                UpdatedRaw = Google.Apis.Util.Utilities.GetStringFromDateTime(value);
            }
        }

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
        

        /// <summary>The author of this Comment.</summary>
        public class AuthorData
        {
            /// <summary>The display name.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("displayName")]
            public virtual string DisplayName { get; set; } 

            /// <summary>The identifier of the Comment creator.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("id")]
            public virtual string Id { get; set; } 

            /// <summary>The comment creator's avatar.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("image")]
            public virtual AuthorData.ImageData Image { get; set; } 

            /// <summary>The URL of the Comment creator's Profile page.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("url")]
            public virtual string Url { get; set; } 

            

            /// <summary>The comment creator's avatar.</summary>
            public class ImageData
            {
                /// <summary>The comment creator's avatar URL.</summary>
                [Newtonsoft.Json.JsonPropertyAttribute("url")]
                public virtual string Url { get; set; } 

            }
        }    

        /// <summary>Data about the blog containing this comment.</summary>
        public class BlogData
        {
            /// <summary>The identifier of the blog containing this comment.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("id")]
            public virtual System.Nullable<long> Id { get; set; } 

        }    

        /// <summary>Data about the comment this is in reply to.</summary>
        public class InReplyToData
        {
            /// <summary>The identified of the parent of this comment.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("id")]
            public virtual System.Nullable<long> Id { get; set; } 

        }    

        /// <summary>Data about the post containing this comment.</summary>
        public class PostData
        {
            /// <summary>The identifier of the post containing this comment.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("id")]
            public virtual System.Nullable<long> Id { get; set; } 

        }
    }    

    public class CommentList : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The List of Comments for a Post.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("items")]
        public virtual System.Collections.Generic.IList<Comment> Items { get; set; } 

        /// <summary>The kind of this entry. Always blogger#commentList</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind { get; set; } 

        /// <summary>Pagination token to fetch the next page, if one exists.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("nextPageToken")]
        public virtual string NextPageToken { get; set; } 

        /// <summary>Pagination token to fetch the previous page, if one exists.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("prevPageToken")]
        public virtual string PrevPageToken { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    public class Page : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The author of this Page.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("author")]
        public virtual Page.AuthorData Author { get; set; } 

        /// <summary>Data about the blog containing this Page.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("blog")]
        public virtual Page.BlogData Blog { get; set; } 

        /// <summary>The body content of this Page, in HTML.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("content")]
        public virtual string Content { get; set; } 

        /// <summary>The identifier for this resource.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("id")]
        public virtual System.Nullable<long> Id { get; set; } 

        /// <summary>The kind of this entity. Always blogger#page</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind { get; set; } 

        /// <summary>RFC 3339 date-time when this Page was published.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("published")]
        public virtual string PublishedRaw { get; set; }

        /// <summary><seealso cref="System.DateTime"/> representation of <see cref="PublishedRaw"/>.</summary>
        [Newtonsoft.Json.JsonIgnore]
        public virtual System.Nullable<System.DateTime> Published
        {
            get
            {
                return Google.Apis.Util.Utilities.GetDateTimeFromString(PublishedRaw);
            }
            set
            {
                PublishedRaw = Google.Apis.Util.Utilities.GetStringFromDateTime(value);
            }
        }

        /// <summary>The API REST URL to fetch this resource from.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("selfLink")]
        public virtual string SelfLink { get; set; } 

        /// <summary>The title of this entity. This is the name displayed in the Admin user interface.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("title")]
        public virtual string Title { get; set; } 

        /// <summary>RFC 3339 date-time when this Page was last updated.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("updated")]
        public virtual string UpdatedRaw { get; set; }

        /// <summary><seealso cref="System.DateTime"/> representation of <see cref="UpdatedRaw"/>.</summary>
        [Newtonsoft.Json.JsonIgnore]
        public virtual System.Nullable<System.DateTime> Updated
        {
            get
            {
                return Google.Apis.Util.Utilities.GetDateTimeFromString(UpdatedRaw);
            }
            set
            {
                UpdatedRaw = Google.Apis.Util.Utilities.GetStringFromDateTime(value);
            }
        }

        /// <summary>The URL that this Page is displayed at.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("url")]
        public virtual string Url { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
        

        /// <summary>The author of this Page.</summary>
        public class AuthorData
        {
            /// <summary>The display name.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("displayName")]
            public virtual string DisplayName { get; set; } 

            /// <summary>The identifier of the Page creator.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("id")]
            public virtual string Id { get; set; } 

            /// <summary>The page author's avatar.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("image")]
            public virtual AuthorData.ImageData Image { get; set; } 

            /// <summary>The URL of the Page creator's Profile page.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("url")]
            public virtual string Url { get; set; } 

            

            /// <summary>The page author's avatar.</summary>
            public class ImageData
            {
                /// <summary>The page author's avatar URL.</summary>
                [Newtonsoft.Json.JsonPropertyAttribute("url")]
                public virtual string Url { get; set; } 

            }
        }    

        /// <summary>Data about the blog containing this Page.</summary>
        public class BlogData
        {
            /// <summary>The identifier of the blog containing this page.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("id")]
            public virtual System.Nullable<long> Id { get; set; } 

        }
    }    

    public class PageList : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The list of Pages for a Blog.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("items")]
        public virtual System.Collections.Generic.IList<Page> Items { get; set; } 

        /// <summary>The kind of this entity. Always blogger#pageList</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    public class Post : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The author of this Post.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("author")]
        public virtual Post.AuthorData Author { get; set; } 

        /// <summary>Data about the blog containing this Post.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("blog")]
        public virtual Post.BlogData Blog { get; set; } 

        /// <summary>The content of the Post. May contain HTML markup.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("content")]
        public virtual string Content { get; set; } 

        /// <summary>The identifier of this Post.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("id")]
        public virtual System.Nullable<long> Id { get; set; } 

        /// <summary>The kind of this entity. Always blogger#post</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind { get; set; } 

        /// <summary>The list of labels this Post was tagged with.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("labels")]
        public virtual System.Collections.Generic.IList<string> Labels { get; set; } 

        /// <summary>RFC 3339 date-time when this Post was published.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("published")]
        public virtual string PublishedRaw { get; set; }

        /// <summary><seealso cref="System.DateTime"/> representation of <see cref="PublishedRaw"/>.</summary>
        [Newtonsoft.Json.JsonIgnore]
        public virtual System.Nullable<System.DateTime> Published
        {
            get
            {
                return Google.Apis.Util.Utilities.GetDateTimeFromString(PublishedRaw);
            }
            set
            {
                PublishedRaw = Google.Apis.Util.Utilities.GetStringFromDateTime(value);
            }
        }

        /// <summary>The container of comments on this Post.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("replies")]
        public virtual Post.RepliesData Replies { get; set; } 

        /// <summary>The API REST URL to fetch this resource from.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("selfLink")]
        public virtual string SelfLink { get; set; } 

        /// <summary>The title of the Post.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("title")]
        public virtual string Title { get; set; } 

        /// <summary>RFC 3339 date-time when this Post was last updated.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("updated")]
        public virtual string UpdatedRaw { get; set; }

        /// <summary><seealso cref="System.DateTime"/> representation of <see cref="UpdatedRaw"/>.</summary>
        [Newtonsoft.Json.JsonIgnore]
        public virtual System.Nullable<System.DateTime> Updated
        {
            get
            {
                return Google.Apis.Util.Utilities.GetDateTimeFromString(UpdatedRaw);
            }
            set
            {
                UpdatedRaw = Google.Apis.Util.Utilities.GetStringFromDateTime(value);
            }
        }

        /// <summary>The URL where this Post is displayed.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("url")]
        public virtual string Url { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
        

        /// <summary>The author of this Post.</summary>
        public class AuthorData
        {
            /// <summary>The display name.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("displayName")]
            public virtual string DisplayName { get; set; } 

            /// <summary>The identifier of the Post creator.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("id")]
            public virtual string Id { get; set; } 

            /// <summary>The Post author's avatar.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("image")]
            public virtual AuthorData.ImageData Image { get; set; } 

            /// <summary>The URL of the Post creator's Profile page.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("url")]
            public virtual string Url { get; set; } 

            

            /// <summary>The Post author's avatar.</summary>
            public class ImageData
            {
                /// <summary>The Post author's avatar URL.</summary>
                [Newtonsoft.Json.JsonPropertyAttribute("url")]
                public virtual string Url { get; set; } 

            }
        }    

        /// <summary>Data about the blog containing this Post.</summary>
        public class BlogData
        {
            /// <summary>The identifier of the Blog that contains this Post.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("id")]
            public virtual System.Nullable<long> Id { get; set; } 

        }    

        /// <summary>The container of comments on this Post.</summary>
        public class RepliesData
        {
            /// <summary>The URL of the comments on this post.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("selfLink")]
            public virtual string SelfLink { get; set; } 

            /// <summary>The count of comments on this post.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("totalItems")]
            public virtual System.Nullable<long> TotalItems { get; set; } 

        }
    }    

    public class PostList : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The list of Posts for this Blog.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("items")]
        public virtual System.Collections.Generic.IList<Post> Items { get; set; } 

        /// <summary>The kind of this entity. Always blogger#postList</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind { get; set; } 

        /// <summary>Pagination token to fetch the next page, if one exists.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("nextPageToken")]
        public virtual string NextPageToken { get; set; } 

        /// <summary>Pagination token to fetch the previous page, if one exists.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("prevPageToken")]
        public virtual string PrevPageToken { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    public class User : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Profile summary information.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("about")]
        public virtual string About { get; set; } 

        /// <summary>The container of blogs for this user.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("blogs")]
        public virtual User.BlogsData Blogs { get; set; } 

        /// <summary>The timestamp of when this profile was created, in seconds since epoch.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("created")]
        public virtual string CreatedRaw { get; set; }

        /// <summary><seealso cref="System.DateTime"/> representation of <see cref="CreatedRaw"/>.</summary>
        [Newtonsoft.Json.JsonIgnore]
        public virtual System.Nullable<System.DateTime> Created
        {
            get
            {
                return Google.Apis.Util.Utilities.GetDateTimeFromString(CreatedRaw);
            }
            set
            {
                CreatedRaw = Google.Apis.Util.Utilities.GetStringFromDateTime(value);
            }
        }

        /// <summary>The display name.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("displayName")]
        public virtual string DisplayName { get; set; } 

        /// <summary>The identifier for this User.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("id")]
        public virtual string Id { get; set; } 

        /// <summary>The kind of this entity. Always blogger#user</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind { get; set; } 

        /// <summary>This user's locale</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("locale")]
        public virtual User.LocaleData Locale { get; set; } 

        /// <summary>The API REST URL to fetch this resource from.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("selfLink")]
        public virtual string SelfLink { get; set; } 

        /// <summary>The user's profile page.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("url")]
        public virtual string Url { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
        

        /// <summary>The container of blogs for this user.</summary>
        public class BlogsData
        {
            /// <summary>The URL of the Blogs for this user.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("selfLink")]
            public virtual string SelfLink { get; set; } 

        }    

        /// <summary>This user's locale</summary>
        public class LocaleData
        {
            /// <summary>The user's country setting.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("country")]
            public virtual string Country { get; set; } 

            /// <summary>The user's language setting.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("language")]
            public virtual string Language { get; set; } 

            /// <summary>The user's language variant setting.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("variant")]
            public virtual string Variant { get; set; } 

        }
    }
}
