// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by google-apis-code-generator 1.5.1
//     C# generator version: 1.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

/**
 * \brief
 *   Google Classroom API Version v1
 *
 * \section ApiInfo API Version Information
 *    <table>
 *      <tr><th>API
 *          <td><a href='https://developers.google.com/classroom/'>Google Classroom API</a>
 *      <tr><th>API Version<td>v1
 *      <tr><th>API Rev<td>20160428 (483)
 *      <tr><th>API Docs
 *          <td><a href='https://developers.google.com/classroom/'>
 *              https://developers.google.com/classroom/</a>
 *      <tr><th>Discovery Name<td>classroom
 *    </table>
 *
 * \section ForMoreInfo For More Information
 *
 * The complete API documentation for using Google Classroom API can be found at
 * <a href='https://developers.google.com/classroom/'>https://developers.google.com/classroom/</a>.
 *
 * For more information about the Google APIs Client Library for .NET, see
 * <a href='https://developers.google.com/api-client-library/dotnet/get_started'>
 * https://developers.google.com/api-client-library/dotnet/get_started</a>
 */

namespace Google.Apis.Classroom.v1
{
    /// <summary>The Classroom Service.</summary>
    public class ClassroomService : Google.Apis.Services.BaseClientService
    {
        /// <summary>The API version.</summary>
        public const string Version = "v1";

        /// <summary>The discovery version used to generate this service.</summary>
        public static Google.Apis.Discovery.DiscoveryVersion DiscoveryVersionUsed =
            Google.Apis.Discovery.DiscoveryVersion.Version_1_0;

        /// <summary>Constructs a new service.</summary>
        public ClassroomService() :
            this(new Google.Apis.Services.BaseClientService.Initializer()) {}

        /// <summary>Constructs a new service.</summary>
        /// <param name="initializer">The service initializer.</param>
        public ClassroomService(Google.Apis.Services.BaseClientService.Initializer initializer)
            : base(initializer)
        {
            courses = new CoursesResource(this);
            invitations = new InvitationsResource(this);
            userProfiles = new UserProfilesResource(this);
        }

        /// <summary>Gets the service supported features.</summary>
        public override System.Collections.Generic.IList<string> Features
        {
            get { return new string[0]; }
        }

        /// <summary>Gets the service name.</summary>
        public override string Name
        {
            get { return "classroom"; }
        }

        /// <summary>Gets the service base URI.</summary>
        public override string BaseUri
        {
            get { return "https://classroom.googleapis.com/"; }
        }

        /// <summary>Gets the service base path.</summary>
        public override string BasePath
        {
            get { return ""; }
        }

        /// <summary>Available OAuth 2.0 scopes for use with the Google Classroom API.</summary>
        public class Scope
        {
            /// <summary>Manage your Google Classroom classes</summary>
            public static string ClassroomCourses = "https://www.googleapis.com/auth/classroom.courses";

            /// <summary>View your Google Classroom classes</summary>
            public static string ClassroomCoursesReadonly = "https://www.googleapis.com/auth/classroom.courses.readonly";

            /// <summary>View the email addresses of people in your classes</summary>
            public static string ClassroomProfileEmails = "https://www.googleapis.com/auth/classroom.profile.emails";

            /// <summary>View the profile photos of people in your classes</summary>
            public static string ClassroomProfilePhotos = "https://www.googleapis.com/auth/classroom.profile.photos";

            /// <summary>Manage your Google Classroom class rosters</summary>
            public static string ClassroomRosters = "https://www.googleapis.com/auth/classroom.rosters";

            /// <summary>View your Google Classroom class rosters</summary>
            public static string ClassroomRostersReadonly = "https://www.googleapis.com/auth/classroom.rosters.readonly";

        }



        private readonly CoursesResource courses;

        /// <summary>Gets the Courses resource.</summary>
        public virtual CoursesResource Courses
        {
            get { return courses; }
        }

        private readonly InvitationsResource invitations;

        /// <summary>Gets the Invitations resource.</summary>
        public virtual InvitationsResource Invitations
        {
            get { return invitations; }
        }

        private readonly UserProfilesResource userProfiles;

        /// <summary>Gets the UserProfiles resource.</summary>
        public virtual UserProfilesResource UserProfiles
        {
            get { return userProfiles; }
        }
    }

    ///<summary>A base abstract class for Classroom requests.</summary>
    public abstract class ClassroomBaseServiceRequest<TResponse> : Google.Apis.Requests.ClientServiceRequest<TResponse>
    {
        ///<summary>Constructs a new ClassroomBaseServiceRequest instance.</summary>
        protected ClassroomBaseServiceRequest(Google.Apis.Services.IClientService service)
            : base(service)
        {
        }

        /// <summary>V1 error format.</summary>
        [Google.Apis.Util.RequestParameterAttribute("$.xgafv", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string Xgafv { get; set; }

        /// <summary>OAuth access token.</summary>
        [Google.Apis.Util.RequestParameterAttribute("access_token", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string AccessToken { get; set; }

        /// <summary>Data format for response.</summary>
        /// [default: json]
        [Google.Apis.Util.RequestParameterAttribute("alt", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string Alt { get; set; }

        /// <summary>OAuth bearer token.</summary>
        [Google.Apis.Util.RequestParameterAttribute("bearer_token", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string BearerToken { get; set; }

        /// <summary>JSONP</summary>
        [Google.Apis.Util.RequestParameterAttribute("callback", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string Callback { get; set; }

        /// <summary>Selector specifying which fields to include in a partial response.</summary>
        [Google.Apis.Util.RequestParameterAttribute("fields", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string Fields { get; set; }

        /// <summary>API key. Your API key identifies your project and provides you with API access, quota, and reports.
        /// Required unless you provide an OAuth 2.0 token.</summary>
        [Google.Apis.Util.RequestParameterAttribute("key", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string Key { get; set; }

        /// <summary>OAuth 2.0 token for the current user.</summary>
        [Google.Apis.Util.RequestParameterAttribute("oauth_token", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string OauthToken { get; set; }

        /// <summary>Pretty-print response.</summary>
        /// [default: true]
        [Google.Apis.Util.RequestParameterAttribute("pp", Google.Apis.Util.RequestParameterType.Query)]
        public virtual System.Nullable<bool> Pp { get; set; }

        /// <summary>Returns response with indentations and line breaks.</summary>
        /// [default: true]
        [Google.Apis.Util.RequestParameterAttribute("prettyPrint", Google.Apis.Util.RequestParameterType.Query)]
        public virtual System.Nullable<bool> PrettyPrint { get; set; }

        /// <summary>Available to use for quota purposes for server-side applications. Can be any arbitrary string
        /// assigned to a user, but should not exceed 40 characters.</summary>
        [Google.Apis.Util.RequestParameterAttribute("quotaUser", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string QuotaUser { get; set; }

        /// <summary>Legacy upload protocol for media (e.g. "media", "multipart").</summary>
        [Google.Apis.Util.RequestParameterAttribute("uploadType", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string UploadType { get; set; }

        /// <summary>Upload protocol for media (e.g. "raw", "multipart").</summary>
        [Google.Apis.Util.RequestParameterAttribute("upload_protocol", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string UploadProtocol { get; set; }

        /// <summary>Initializes Classroom parameter list.</summary>
        protected override void InitParameters()
        {
            base.InitParameters();

            RequestParameters.Add(
                "$.xgafv", new Google.Apis.Discovery.Parameter
                {
                    Name = "$.xgafv",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "access_token", new Google.Apis.Discovery.Parameter
                {
                    Name = "access_token",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "alt", new Google.Apis.Discovery.Parameter
                {
                    Name = "alt",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = "json",
                    Pattern = null,
                });
            RequestParameters.Add(
                "bearer_token", new Google.Apis.Discovery.Parameter
                {
                    Name = "bearer_token",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "callback", new Google.Apis.Discovery.Parameter
                {
                    Name = "callback",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "fields", new Google.Apis.Discovery.Parameter
                {
                    Name = "fields",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "key", new Google.Apis.Discovery.Parameter
                {
                    Name = "key",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "oauth_token", new Google.Apis.Discovery.Parameter
                {
                    Name = "oauth_token",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "pp", new Google.Apis.Discovery.Parameter
                {
                    Name = "pp",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = "true",
                    Pattern = null,
                });
            RequestParameters.Add(
                "prettyPrint", new Google.Apis.Discovery.Parameter
                {
                    Name = "prettyPrint",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = "true",
                    Pattern = null,
                });
            RequestParameters.Add(
                "quotaUser", new Google.Apis.Discovery.Parameter
                {
                    Name = "quotaUser",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "uploadType", new Google.Apis.Discovery.Parameter
                {
                    Name = "uploadType",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "upload_protocol", new Google.Apis.Discovery.Parameter
                {
                    Name = "upload_protocol",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
        }
    }

    /// <summary>The "courses" collection of methods.</summary>
    public class CoursesResource
    {
        private const string Resource = "courses";

        /// <summary>The service which this resource belongs to.</summary>
        private readonly Google.Apis.Services.IClientService service;

        /// <summary>Constructs a new resource.</summary>
        public CoursesResource(Google.Apis.Services.IClientService service)
        {
            this.service = service;
            aliases = new AliasesResource(service);
            students = new StudentsResource(service);
            teachers = new TeachersResource(service);

        }

        private readonly AliasesResource aliases;

        /// <summary>Gets the Aliases resource.</summary>
        public virtual AliasesResource Aliases
        {
            get { return aliases; }
        }

        /// <summary>The "aliases" collection of methods.</summary>
        public class AliasesResource
        {
            private const string Resource = "aliases";

            /// <summary>The service which this resource belongs to.</summary>
            private readonly Google.Apis.Services.IClientService service;

            /// <summary>Constructs a new resource.</summary>
            public AliasesResource(Google.Apis.Services.IClientService service)
            {
                this.service = service;

            }


            /// <summary>Creates an alias for a course. This method returns the following error codes: *
            /// `PERMISSION_DENIED` if the requesting user is not permitted to create the alias or for access errors. *
            /// `NOT_FOUND` if the course does not exist. * `ALREADY_EXISTS` if the alias already exists.</summary>
            /// <param name="body">The body of the request.</param>
            /// <param name="courseId">Identifier of the course to alias. This identifier can be either the Classroom-assigned
            /// identifier or an alias.</param>
            public virtual CreateRequest Create(Google.Apis.Classroom.v1.Data.CourseAlias body, string courseId)
            {
                return new CreateRequest(service, body, courseId);
            }

            /// <summary>Creates an alias for a course. This method returns the following error codes: *
            /// `PERMISSION_DENIED` if the requesting user is not permitted to create the alias or for access errors. *
            /// `NOT_FOUND` if the course does not exist. * `ALREADY_EXISTS` if the alias already exists.</summary>
            public class CreateRequest : ClassroomBaseServiceRequest<Google.Apis.Classroom.v1.Data.CourseAlias>
            {
                /// <summary>Constructs a new Create request.</summary>
                public CreateRequest(Google.Apis.Services.IClientService service, Google.Apis.Classroom.v1.Data.CourseAlias body, string courseId)
                    : base(service)
                {
                    CourseId = courseId;
                    Body = body;
                    InitParameters();
                }


                /// <summary>Identifier of the course to alias. This identifier can be either the Classroom-assigned
                /// identifier or an alias.</summary>
                [Google.Apis.Util.RequestParameterAttribute("courseId", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string CourseId { get; private set; }


                /// <summary>Gets or sets the body of this request.</summary>
                Google.Apis.Classroom.v1.Data.CourseAlias Body { get; set; }

                ///<summary>Returns the body of the request.</summary>
                protected override object GetBody() { return Body; }

                ///<summary>Gets the method name.</summary>
                public override string MethodName
                {
                    get { return "create"; }
                }

                ///<summary>Gets the HTTP method.</summary>
                public override string HttpMethod
                {
                    get { return "POST"; }
                }

                ///<summary>Gets the REST path.</summary>
                public override string RestPath
                {
                    get { return "v1/courses/{courseId}/aliases"; }
                }

                /// <summary>Initializes Create parameter list.</summary>
                protected override void InitParameters()
                {
                    base.InitParameters();

                    RequestParameters.Add(
                        "courseId", new Google.Apis.Discovery.Parameter
                        {
                            Name = "courseId",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = null,
                        });
                }

            }

            /// <summary>Deletes an alias of a course. This method returns the following error codes: *
            /// `PERMISSION_DENIED` if the requesting user is not permitted to remove the alias or for access errors. *
            /// `NOT_FOUND` if the alias does not exist.</summary>
            /// <param name="courseId">Identifier of the course whose alias should be deleted. This identifier can be either the
            /// Classroom-assigned identifier or an alias.</param>
            /// <param name="alias">Alias to delete. This may not be the
            /// Classroom-assigned identifier.</param>
            public virtual DeleteRequest Delete(string courseId, string alias)
            {
                return new DeleteRequest(service, courseId, alias);
            }

            /// <summary>Deletes an alias of a course. This method returns the following error codes: *
            /// `PERMISSION_DENIED` if the requesting user is not permitted to remove the alias or for access errors. *
            /// `NOT_FOUND` if the alias does not exist.</summary>
            public class DeleteRequest : ClassroomBaseServiceRequest<Google.Apis.Classroom.v1.Data.Empty>
            {
                /// <summary>Constructs a new Delete request.</summary>
                public DeleteRequest(Google.Apis.Services.IClientService service, string courseId, string alias)
                    : base(service)
                {
                    CourseId = courseId;
                    Alias = alias;
                    InitParameters();
                }


                /// <summary>Identifier of the course whose alias should be deleted. This identifier can be either the
                /// Classroom-assigned identifier or an alias.</summary>
                [Google.Apis.Util.RequestParameterAttribute("courseId", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string CourseId { get; private set; }

                /// <summary>Alias to delete. This may not be the Classroom-assigned identifier.</summary>
                [Google.Apis.Util.RequestParameterAttribute("alias", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string Alias { get; private set; }


                ///<summary>Gets the method name.</summary>
                public override string MethodName
                {
                    get { return "delete"; }
                }

                ///<summary>Gets the HTTP method.</summary>
                public override string HttpMethod
                {
                    get { return "DELETE"; }
                }

                ///<summary>Gets the REST path.</summary>
                public override string RestPath
                {
                    get { return "v1/courses/{courseId}/aliases/{alias}"; }
                }

                /// <summary>Initializes Delete parameter list.</summary>
                protected override void InitParameters()
                {
                    base.InitParameters();

                    RequestParameters.Add(
                        "courseId", new Google.Apis.Discovery.Parameter
                        {
                            Name = "courseId",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = null,
                        });
                    RequestParameters.Add(
                        "alias", new Google.Apis.Discovery.Parameter
                        {
                            Name = "alias",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = null,
                        });
                }

            }

            /// <summary>Returns a list of aliases for a course. This method returns the following error codes: *
            /// `PERMISSION_DENIED` if the requesting user is not permitted to access the course or for access errors. *
            /// `NOT_FOUND` if the course does not exist.</summary>
            /// <param name="courseId">The identifier of the course. This identifier can be either the Classroom-assigned identifier
            /// or an alias.</param>
            public virtual ListRequest List(string courseId)
            {
                return new ListRequest(service, courseId);
            }

            /// <summary>Returns a list of aliases for a course. This method returns the following error codes: *
            /// `PERMISSION_DENIED` if the requesting user is not permitted to access the course or for access errors. *
            /// `NOT_FOUND` if the course does not exist.</summary>
            public class ListRequest : ClassroomBaseServiceRequest<Google.Apis.Classroom.v1.Data.ListCourseAliasesResponse>
            {
                /// <summary>Constructs a new List request.</summary>
                public ListRequest(Google.Apis.Services.IClientService service, string courseId)
                    : base(service)
                {
                    CourseId = courseId;
                    InitParameters();
                }


                /// <summary>The identifier of the course. This identifier can be either the Classroom-assigned
                /// identifier or an alias.</summary>
                [Google.Apis.Util.RequestParameterAttribute("courseId", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string CourseId { get; private set; }

                /// <summary>Maximum number of items to return. Zero or unspecified indicates that the server may assign
                /// a maximum. The server may return fewer than the specified number of results.</summary>
                [Google.Apis.Util.RequestParameterAttribute("pageSize", Google.Apis.Util.RequestParameterType.Query)]
                public virtual System.Nullable<int> PageSize { get; set; }

                /// <summary>nextPageToken value returned from a previous list call, indicating that the subsequent page
                /// of results should be returned. The list request must be otherwise identical to the one that resulted
                /// in this token.</summary>
                [Google.Apis.Util.RequestParameterAttribute("pageToken", Google.Apis.Util.RequestParameterType.Query)]
                public virtual string PageToken { get; set; }


                ///<summary>Gets the method name.</summary>
                public override string MethodName
                {
                    get { return "list"; }
                }

                ///<summary>Gets the HTTP method.</summary>
                public override string HttpMethod
                {
                    get { return "GET"; }
                }

                ///<summary>Gets the REST path.</summary>
                public override string RestPath
                {
                    get { return "v1/courses/{courseId}/aliases"; }
                }

                /// <summary>Initializes List parameter list.</summary>
                protected override void InitParameters()
                {
                    base.InitParameters();

                    RequestParameters.Add(
                        "courseId", new Google.Apis.Discovery.Parameter
                        {
                            Name = "courseId",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = null,
                        });
                    RequestParameters.Add(
                        "pageSize", new Google.Apis.Discovery.Parameter
                        {
                            Name = "pageSize",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                    RequestParameters.Add(
                        "pageToken", new Google.Apis.Discovery.Parameter
                        {
                            Name = "pageToken",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                }

            }
        }
        private readonly StudentsResource students;

        /// <summary>Gets the Students resource.</summary>
        public virtual StudentsResource Students
        {
            get { return students; }
        }

        /// <summary>The "students" collection of methods.</summary>
        public class StudentsResource
        {
            private const string Resource = "students";

            /// <summary>The service which this resource belongs to.</summary>
            private readonly Google.Apis.Services.IClientService service;

            /// <summary>Constructs a new resource.</summary>
            public StudentsResource(Google.Apis.Services.IClientService service)
            {
                this.service = service;

            }


            /// <summary>Adds a user as a student of a course. This method returns the following error codes: *
            /// `PERMISSION_DENIED` if the requesting user is not permitted to create students in this course or for
            /// access errors. * `NOT_FOUND` if the requested course ID does not exist. * `FAILED_PRECONDITION` if the
            /// requested user's account is disabled, for the following request errors: * CourseMemberLimitReached *
            /// CourseNotModifiable * UserGroupsMembershipLimitReached * `ALREADY_EXISTS` if the user is already a
            /// student or teacher in the course.</summary>
            /// <param name="body">The body of the request.</param>
            /// <param name="courseId">Identifier of the course to create the student in. This identifier can be either the
            /// Classroom-assigned identifier or an alias.</param>
            public virtual CreateRequest Create(Google.Apis.Classroom.v1.Data.Student body, string courseId)
            {
                return new CreateRequest(service, body, courseId);
            }

            /// <summary>Adds a user as a student of a course. This method returns the following error codes: *
            /// `PERMISSION_DENIED` if the requesting user is not permitted to create students in this course or for
            /// access errors. * `NOT_FOUND` if the requested course ID does not exist. * `FAILED_PRECONDITION` if the
            /// requested user's account is disabled, for the following request errors: * CourseMemberLimitReached *
            /// CourseNotModifiable * UserGroupsMembershipLimitReached * `ALREADY_EXISTS` if the user is already a
            /// student or teacher in the course.</summary>
            public class CreateRequest : ClassroomBaseServiceRequest<Google.Apis.Classroom.v1.Data.Student>
            {
                /// <summary>Constructs a new Create request.</summary>
                public CreateRequest(Google.Apis.Services.IClientService service, Google.Apis.Classroom.v1.Data.Student body, string courseId)
                    : base(service)
                {
                    CourseId = courseId;
                    Body = body;
                    InitParameters();
                }


                /// <summary>Identifier of the course to create the student in. This identifier can be either the
                /// Classroom-assigned identifier or an alias.</summary>
                [Google.Apis.Util.RequestParameterAttribute("courseId", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string CourseId { get; private set; }

                /// <summary>Enrollment code of the course to create the student in. This code is required if userId
                /// corresponds to the requesting user; it may be omitted if the requesting user has administrative
                /// permissions to create students for any user.</summary>
                [Google.Apis.Util.RequestParameterAttribute("enrollmentCode", Google.Apis.Util.RequestParameterType.Query)]
                public virtual string EnrollmentCode { get; set; }


                /// <summary>Gets or sets the body of this request.</summary>
                Google.Apis.Classroom.v1.Data.Student Body { get; set; }

                ///<summary>Returns the body of the request.</summary>
                protected override object GetBody() { return Body; }

                ///<summary>Gets the method name.</summary>
                public override string MethodName
                {
                    get { return "create"; }
                }

                ///<summary>Gets the HTTP method.</summary>
                public override string HttpMethod
                {
                    get { return "POST"; }
                }

                ///<summary>Gets the REST path.</summary>
                public override string RestPath
                {
                    get { return "v1/courses/{courseId}/students"; }
                }

                /// <summary>Initializes Create parameter list.</summary>
                protected override void InitParameters()
                {
                    base.InitParameters();

                    RequestParameters.Add(
                        "courseId", new Google.Apis.Discovery.Parameter
                        {
                            Name = "courseId",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = null,
                        });
                    RequestParameters.Add(
                        "enrollmentCode", new Google.Apis.Discovery.Parameter
                        {
                            Name = "enrollmentCode",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                }

            }

            /// <summary>Deletes a student of a course. This method returns the following error codes: *
            /// `PERMISSION_DENIED` if the requesting user is not permitted to delete students of this course or for
            /// access errors. * `NOT_FOUND` if no student of this course has the requested ID or if the course does not
            /// exist.</summary>
            /// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or
            /// an alias.</param>
            /// <param name="userId">Identifier of the student to delete. The identifier can be one of the
            /// following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`,
            /// indicating the requesting user</param>
            public virtual DeleteRequest Delete(string courseId, string userId)
            {
                return new DeleteRequest(service, courseId, userId);
            }

            /// <summary>Deletes a student of a course. This method returns the following error codes: *
            /// `PERMISSION_DENIED` if the requesting user is not permitted to delete students of this course or for
            /// access errors. * `NOT_FOUND` if no student of this course has the requested ID or if the course does not
            /// exist.</summary>
            public class DeleteRequest : ClassroomBaseServiceRequest<Google.Apis.Classroom.v1.Data.Empty>
            {
                /// <summary>Constructs a new Delete request.</summary>
                public DeleteRequest(Google.Apis.Services.IClientService service, string courseId, string userId)
                    : base(service)
                {
                    CourseId = courseId;
                    UserId = userId;
                    InitParameters();
                }


                /// <summary>Identifier of the course. This identifier can be either the Classroom-assigned identifier
                /// or an alias.</summary>
                [Google.Apis.Util.RequestParameterAttribute("courseId", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string CourseId { get; private set; }

                /// <summary>Identifier of the student to delete. The identifier can be one of the following: * the
                /// numeric identifier for the user * the email address of the user * the string literal `"me"`,
                /// indicating the requesting user</summary>
                [Google.Apis.Util.RequestParameterAttribute("userId", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string UserId { get; private set; }


                ///<summary>Gets the method name.</summary>
                public override string MethodName
                {
                    get { return "delete"; }
                }

                ///<summary>Gets the HTTP method.</summary>
                public override string HttpMethod
                {
                    get { return "DELETE"; }
                }

                ///<summary>Gets the REST path.</summary>
                public override string RestPath
                {
                    get { return "v1/courses/{courseId}/students/{userId}"; }
                }

                /// <summary>Initializes Delete parameter list.</summary>
                protected override void InitParameters()
                {
                    base.InitParameters();

                    RequestParameters.Add(
                        "courseId", new Google.Apis.Discovery.Parameter
                        {
                            Name = "courseId",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = null,
                        });
                    RequestParameters.Add(
                        "userId", new Google.Apis.Discovery.Parameter
                        {
                            Name = "userId",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = null,
                        });
                }

            }

            /// <summary>Returns a student of a course. This method returns the following error codes: *
            /// `PERMISSION_DENIED` if the requesting user is not permitted to view students of this course or for
            /// access errors. * `NOT_FOUND` if no student of this course has the requested ID or if the course does not
            /// exist.</summary>
            /// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or
            /// an alias.</param>
            /// <param name="userId">Identifier of the student to return. The identifier can be one of the
            /// following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`,
            /// indicating the requesting user</param>
            public virtual GetRequest Get(string courseId, string userId)
            {
                return new GetRequest(service, courseId, userId);
            }

            /// <summary>Returns a student of a course. This method returns the following error codes: *
            /// `PERMISSION_DENIED` if the requesting user is not permitted to view students of this course or for
            /// access errors. * `NOT_FOUND` if no student of this course has the requested ID or if the course does not
            /// exist.</summary>
            public class GetRequest : ClassroomBaseServiceRequest<Google.Apis.Classroom.v1.Data.Student>
            {
                /// <summary>Constructs a new Get request.</summary>
                public GetRequest(Google.Apis.Services.IClientService service, string courseId, string userId)
                    : base(service)
                {
                    CourseId = courseId;
                    UserId = userId;
                    InitParameters();
                }


                /// <summary>Identifier of the course. This identifier can be either the Classroom-assigned identifier
                /// or an alias.</summary>
                [Google.Apis.Util.RequestParameterAttribute("courseId", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string CourseId { get; private set; }

                /// <summary>Identifier of the student to return. The identifier can be one of the following: * the
                /// numeric identifier for the user * the email address of the user * the string literal `"me"`,
                /// indicating the requesting user</summary>
                [Google.Apis.Util.RequestParameterAttribute("userId", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string UserId { get; private set; }


                ///<summary>Gets the method name.</summary>
                public override string MethodName
                {
                    get { return "get"; }
                }

                ///<summary>Gets the HTTP method.</summary>
                public override string HttpMethod
                {
                    get { return "GET"; }
                }

                ///<summary>Gets the REST path.</summary>
                public override string RestPath
                {
                    get { return "v1/courses/{courseId}/students/{userId}"; }
                }

                /// <summary>Initializes Get parameter list.</summary>
                protected override void InitParameters()
                {
                    base.InitParameters();

                    RequestParameters.Add(
                        "courseId", new Google.Apis.Discovery.Parameter
                        {
                            Name = "courseId",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = null,
                        });
                    RequestParameters.Add(
                        "userId", new Google.Apis.Discovery.Parameter
                        {
                            Name = "userId",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = null,
                        });
                }

            }

            /// <summary>Returns a list of students of this course that the requester is permitted to view. This method
            /// returns the following error codes: * `NOT_FOUND` if the course does not exist. * `PERMISSION_DENIED` for
            /// access errors.</summary>
            /// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or
            /// an alias.</param>
            public virtual ListRequest List(string courseId)
            {
                return new ListRequest(service, courseId);
            }

            /// <summary>Returns a list of students of this course that the requester is permitted to view. This method
            /// returns the following error codes: * `NOT_FOUND` if the course does not exist. * `PERMISSION_DENIED` for
            /// access errors.</summary>
            public class ListRequest : ClassroomBaseServiceRequest<Google.Apis.Classroom.v1.Data.ListStudentsResponse>
            {
                /// <summary>Constructs a new List request.</summary>
                public ListRequest(Google.Apis.Services.IClientService service, string courseId)
                    : base(service)
                {
                    CourseId = courseId;
                    InitParameters();
                }


                /// <summary>Identifier of the course. This identifier can be either the Classroom-assigned identifier
                /// or an alias.</summary>
                [Google.Apis.Util.RequestParameterAttribute("courseId", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string CourseId { get; private set; }

                /// <summary>Maximum number of items to return. Zero means no maximum. The server may return fewer than
                /// the specified number of results.</summary>
                [Google.Apis.Util.RequestParameterAttribute("pageSize", Google.Apis.Util.RequestParameterType.Query)]
                public virtual System.Nullable<int> PageSize { get; set; }

                /// <summary>nextPageToken value returned from a previous list call, indicating that the subsequent page
                /// of results should be returned. The list request must be otherwise identical to the one that resulted
                /// in this token.</summary>
                [Google.Apis.Util.RequestParameterAttribute("pageToken", Google.Apis.Util.RequestParameterType.Query)]
                public virtual string PageToken { get; set; }


                ///<summary>Gets the method name.</summary>
                public override string MethodName
                {
                    get { return "list"; }
                }

                ///<summary>Gets the HTTP method.</summary>
                public override string HttpMethod
                {
                    get { return "GET"; }
                }

                ///<summary>Gets the REST path.</summary>
                public override string RestPath
                {
                    get { return "v1/courses/{courseId}/students"; }
                }

                /// <summary>Initializes List parameter list.</summary>
                protected override void InitParameters()
                {
                    base.InitParameters();

                    RequestParameters.Add(
                        "courseId", new Google.Apis.Discovery.Parameter
                        {
                            Name = "courseId",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = null,
                        });
                    RequestParameters.Add(
                        "pageSize", new Google.Apis.Discovery.Parameter
                        {
                            Name = "pageSize",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                    RequestParameters.Add(
                        "pageToken", new Google.Apis.Discovery.Parameter
                        {
                            Name = "pageToken",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                }

            }
        }
        private readonly TeachersResource teachers;

        /// <summary>Gets the Teachers resource.</summary>
        public virtual TeachersResource Teachers
        {
            get { return teachers; }
        }

        /// <summary>The "teachers" collection of methods.</summary>
        public class TeachersResource
        {
            private const string Resource = "teachers";

            /// <summary>The service which this resource belongs to.</summary>
            private readonly Google.Apis.Services.IClientService service;

            /// <summary>Constructs a new resource.</summary>
            public TeachersResource(Google.Apis.Services.IClientService service)
            {
                this.service = service;

            }


            /// <summary>Creates a teacher of a course. This method returns the following error codes: *
            /// `PERMISSION_DENIED` if the requesting user is not permitted to create teachers in this course or for
            /// access errors. * `NOT_FOUND` if the requested course ID does not exist. * `FAILED_PRECONDITION` if the
            /// requested user's account is disabled, for the following request errors: * CourseMemberLimitReached *
            /// CourseNotModifiable * CourseTeacherLimitReached * UserGroupsMembershipLimitReached * `ALREADY_EXISTS` if
            /// the user is already a teacher or student in the course.</summary>
            /// <param name="body">The body of the request.</param>
            /// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or
            /// an alias.</param>
            public virtual CreateRequest Create(Google.Apis.Classroom.v1.Data.Teacher body, string courseId)
            {
                return new CreateRequest(service, body, courseId);
            }

            /// <summary>Creates a teacher of a course. This method returns the following error codes: *
            /// `PERMISSION_DENIED` if the requesting user is not permitted to create teachers in this course or for
            /// access errors. * `NOT_FOUND` if the requested course ID does not exist. * `FAILED_PRECONDITION` if the
            /// requested user's account is disabled, for the following request errors: * CourseMemberLimitReached *
            /// CourseNotModifiable * CourseTeacherLimitReached * UserGroupsMembershipLimitReached * `ALREADY_EXISTS` if
            /// the user is already a teacher or student in the course.</summary>
            public class CreateRequest : ClassroomBaseServiceRequest<Google.Apis.Classroom.v1.Data.Teacher>
            {
                /// <summary>Constructs a new Create request.</summary>
                public CreateRequest(Google.Apis.Services.IClientService service, Google.Apis.Classroom.v1.Data.Teacher body, string courseId)
                    : base(service)
                {
                    CourseId = courseId;
                    Body = body;
                    InitParameters();
                }


                /// <summary>Identifier of the course. This identifier can be either the Classroom-assigned identifier
                /// or an alias.</summary>
                [Google.Apis.Util.RequestParameterAttribute("courseId", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string CourseId { get; private set; }


                /// <summary>Gets or sets the body of this request.</summary>
                Google.Apis.Classroom.v1.Data.Teacher Body { get; set; }

                ///<summary>Returns the body of the request.</summary>
                protected override object GetBody() { return Body; }

                ///<summary>Gets the method name.</summary>
                public override string MethodName
                {
                    get { return "create"; }
                }

                ///<summary>Gets the HTTP method.</summary>
                public override string HttpMethod
                {
                    get { return "POST"; }
                }

                ///<summary>Gets the REST path.</summary>
                public override string RestPath
                {
                    get { return "v1/courses/{courseId}/teachers"; }
                }

                /// <summary>Initializes Create parameter list.</summary>
                protected override void InitParameters()
                {
                    base.InitParameters();

                    RequestParameters.Add(
                        "courseId", new Google.Apis.Discovery.Parameter
                        {
                            Name = "courseId",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = null,
                        });
                }

            }

            /// <summary>Deletes a teacher of a course. This method returns the following error codes: *
            /// `PERMISSION_DENIED` if the requesting user is not permitted to delete teachers of this course or for
            /// access errors. * `NOT_FOUND` if no teacher of this course has the requested ID or if the course does not
            /// exist. * `FAILED_PRECONDITION` if the requested ID belongs to the primary teacher of this
            /// course.</summary>
            /// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or
            /// an alias.</param>
            /// <param name="userId">Identifier of the teacher to delete. The identifier can be one of the
            /// following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`,
            /// indicating the requesting user</param>
            public virtual DeleteRequest Delete(string courseId, string userId)
            {
                return new DeleteRequest(service, courseId, userId);
            }

            /// <summary>Deletes a teacher of a course. This method returns the following error codes: *
            /// `PERMISSION_DENIED` if the requesting user is not permitted to delete teachers of this course or for
            /// access errors. * `NOT_FOUND` if no teacher of this course has the requested ID or if the course does not
            /// exist. * `FAILED_PRECONDITION` if the requested ID belongs to the primary teacher of this
            /// course.</summary>
            public class DeleteRequest : ClassroomBaseServiceRequest<Google.Apis.Classroom.v1.Data.Empty>
            {
                /// <summary>Constructs a new Delete request.</summary>
                public DeleteRequest(Google.Apis.Services.IClientService service, string courseId, string userId)
                    : base(service)
                {
                    CourseId = courseId;
                    UserId = userId;
                    InitParameters();
                }


                /// <summary>Identifier of the course. This identifier can be either the Classroom-assigned identifier
                /// or an alias.</summary>
                [Google.Apis.Util.RequestParameterAttribute("courseId", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string CourseId { get; private set; }

                /// <summary>Identifier of the teacher to delete. The identifier can be one of the following: * the
                /// numeric identifier for the user * the email address of the user * the string literal `"me"`,
                /// indicating the requesting user</summary>
                [Google.Apis.Util.RequestParameterAttribute("userId", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string UserId { get; private set; }


                ///<summary>Gets the method name.</summary>
                public override string MethodName
                {
                    get { return "delete"; }
                }

                ///<summary>Gets the HTTP method.</summary>
                public override string HttpMethod
                {
                    get { return "DELETE"; }
                }

                ///<summary>Gets the REST path.</summary>
                public override string RestPath
                {
                    get { return "v1/courses/{courseId}/teachers/{userId}"; }
                }

                /// <summary>Initializes Delete parameter list.</summary>
                protected override void InitParameters()
                {
                    base.InitParameters();

                    RequestParameters.Add(
                        "courseId", new Google.Apis.Discovery.Parameter
                        {
                            Name = "courseId",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = null,
                        });
                    RequestParameters.Add(
                        "userId", new Google.Apis.Discovery.Parameter
                        {
                            Name = "userId",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = null,
                        });
                }

            }

            /// <summary>Returns a teacher of a course. This method returns the following error codes: *
            /// `PERMISSION_DENIED` if the requesting user is not permitted to view teachers of this course or for
            /// access errors. * `NOT_FOUND` if no teacher of this course has the requested ID or if the course does not
            /// exist.</summary>
            /// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or
            /// an alias.</param>
            /// <param name="userId">Identifier of the teacher to return. The identifier can be one of the
            /// following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`,
            /// indicating the requesting user</param>
            public virtual GetRequest Get(string courseId, string userId)
            {
                return new GetRequest(service, courseId, userId);
            }

            /// <summary>Returns a teacher of a course. This method returns the following error codes: *
            /// `PERMISSION_DENIED` if the requesting user is not permitted to view teachers of this course or for
            /// access errors. * `NOT_FOUND` if no teacher of this course has the requested ID or if the course does not
            /// exist.</summary>
            public class GetRequest : ClassroomBaseServiceRequest<Google.Apis.Classroom.v1.Data.Teacher>
            {
                /// <summary>Constructs a new Get request.</summary>
                public GetRequest(Google.Apis.Services.IClientService service, string courseId, string userId)
                    : base(service)
                {
                    CourseId = courseId;
                    UserId = userId;
                    InitParameters();
                }


                /// <summary>Identifier of the course. This identifier can be either the Classroom-assigned identifier
                /// or an alias.</summary>
                [Google.Apis.Util.RequestParameterAttribute("courseId", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string CourseId { get; private set; }

                /// <summary>Identifier of the teacher to return. The identifier can be one of the following: * the
                /// numeric identifier for the user * the email address of the user * the string literal `"me"`,
                /// indicating the requesting user</summary>
                [Google.Apis.Util.RequestParameterAttribute("userId", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string UserId { get; private set; }


                ///<summary>Gets the method name.</summary>
                public override string MethodName
                {
                    get { return "get"; }
                }

                ///<summary>Gets the HTTP method.</summary>
                public override string HttpMethod
                {
                    get { return "GET"; }
                }

                ///<summary>Gets the REST path.</summary>
                public override string RestPath
                {
                    get { return "v1/courses/{courseId}/teachers/{userId}"; }
                }

                /// <summary>Initializes Get parameter list.</summary>
                protected override void InitParameters()
                {
                    base.InitParameters();

                    RequestParameters.Add(
                        "courseId", new Google.Apis.Discovery.Parameter
                        {
                            Name = "courseId",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = null,
                        });
                    RequestParameters.Add(
                        "userId", new Google.Apis.Discovery.Parameter
                        {
                            Name = "userId",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = null,
                        });
                }

            }

            /// <summary>Returns a list of teachers of this course that the requester is permitted to view. This method
            /// returns the following error codes: * `NOT_FOUND` if the course does not exist. * `PERMISSION_DENIED` for
            /// access errors.</summary>
            /// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or
            /// an alias.</param>
            public virtual ListRequest List(string courseId)
            {
                return new ListRequest(service, courseId);
            }

            /// <summary>Returns a list of teachers of this course that the requester is permitted to view. This method
            /// returns the following error codes: * `NOT_FOUND` if the course does not exist. * `PERMISSION_DENIED` for
            /// access errors.</summary>
            public class ListRequest : ClassroomBaseServiceRequest<Google.Apis.Classroom.v1.Data.ListTeachersResponse>
            {
                /// <summary>Constructs a new List request.</summary>
                public ListRequest(Google.Apis.Services.IClientService service, string courseId)
                    : base(service)
                {
                    CourseId = courseId;
                    InitParameters();
                }


                /// <summary>Identifier of the course. This identifier can be either the Classroom-assigned identifier
                /// or an alias.</summary>
                [Google.Apis.Util.RequestParameterAttribute("courseId", Google.Apis.Util.RequestParameterType.Path)]
                public virtual string CourseId { get; private set; }

                /// <summary>Maximum number of items to return. Zero means no maximum. The server may return fewer than
                /// the specified number of results.</summary>
                [Google.Apis.Util.RequestParameterAttribute("pageSize", Google.Apis.Util.RequestParameterType.Query)]
                public virtual System.Nullable<int> PageSize { get; set; }

                /// <summary>nextPageToken value returned from a previous list call, indicating that the subsequent page
                /// of results should be returned. The list request must be otherwise identical to the one that resulted
                /// in this token.</summary>
                [Google.Apis.Util.RequestParameterAttribute("pageToken", Google.Apis.Util.RequestParameterType.Query)]
                public virtual string PageToken { get; set; }


                ///<summary>Gets the method name.</summary>
                public override string MethodName
                {
                    get { return "list"; }
                }

                ///<summary>Gets the HTTP method.</summary>
                public override string HttpMethod
                {
                    get { return "GET"; }
                }

                ///<summary>Gets the REST path.</summary>
                public override string RestPath
                {
                    get { return "v1/courses/{courseId}/teachers"; }
                }

                /// <summary>Initializes List parameter list.</summary>
                protected override void InitParameters()
                {
                    base.InitParameters();

                    RequestParameters.Add(
                        "courseId", new Google.Apis.Discovery.Parameter
                        {
                            Name = "courseId",
                            IsRequired = true,
                            ParameterType = "path",
                            DefaultValue = null,
                            Pattern = null,
                        });
                    RequestParameters.Add(
                        "pageSize", new Google.Apis.Discovery.Parameter
                        {
                            Name = "pageSize",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                    RequestParameters.Add(
                        "pageToken", new Google.Apis.Discovery.Parameter
                        {
                            Name = "pageToken",
                            IsRequired = false,
                            ParameterType = "query",
                            DefaultValue = null,
                            Pattern = null,
                        });
                }

            }
        }

        /// <summary>Creates a course. The user specified in `ownerId` is the owner of the created course and added as a
        /// teacher. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not
        /// permitted to create courses or for access errors. * `NOT_FOUND` if the primary teacher is not a valid user.
        /// * `FAILED_PRECONDITION` if the course owner's account is disabled or for the following request errors: *
        /// UserGroupsMembershipLimitReached * `ALREADY_EXISTS` if an alias was specified in the `id` and already
        /// exists.</summary>
        /// <param name="body">The body of the request.</param>
        public virtual CreateRequest Create(Google.Apis.Classroom.v1.Data.Course body)
        {
            return new CreateRequest(service, body);
        }

        /// <summary>Creates a course. The user specified in `ownerId` is the owner of the created course and added as a
        /// teacher. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not
        /// permitted to create courses or for access errors. * `NOT_FOUND` if the primary teacher is not a valid user.
        /// * `FAILED_PRECONDITION` if the course owner's account is disabled or for the following request errors: *
        /// UserGroupsMembershipLimitReached * `ALREADY_EXISTS` if an alias was specified in the `id` and already
        /// exists.</summary>
        public class CreateRequest : ClassroomBaseServiceRequest<Google.Apis.Classroom.v1.Data.Course>
        {
            /// <summary>Constructs a new Create request.</summary>
            public CreateRequest(Google.Apis.Services.IClientService service, Google.Apis.Classroom.v1.Data.Course body)
                : base(service)
            {
                Body = body;
                InitParameters();
            }



            /// <summary>Gets or sets the body of this request.</summary>
            Google.Apis.Classroom.v1.Data.Course Body { get; set; }

            ///<summary>Returns the body of the request.</summary>
            protected override object GetBody() { return Body; }

            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "create"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "POST"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1/courses"; }
            }

            /// <summary>Initializes Create parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

            }

        }

        /// <summary>Deletes a course. This method returns the following error codes: * `PERMISSION_DENIED` if the
        /// requesting user is not permitted to delete the requested course or for access errors. * `NOT_FOUND` if no
        /// course exists with the requested ID.</summary>
        /// <param name="id">Identifier of the course to delete. This identifier can be either the Classroom-assigned identifier
        /// or an alias.</param>
        public virtual DeleteRequest Delete(string id)
        {
            return new DeleteRequest(service, id);
        }

        /// <summary>Deletes a course. This method returns the following error codes: * `PERMISSION_DENIED` if the
        /// requesting user is not permitted to delete the requested course or for access errors. * `NOT_FOUND` if no
        /// course exists with the requested ID.</summary>
        public class DeleteRequest : ClassroomBaseServiceRequest<Google.Apis.Classroom.v1.Data.Empty>
        {
            /// <summary>Constructs a new Delete request.</summary>
            public DeleteRequest(Google.Apis.Services.IClientService service, string id)
                : base(service)
            {
                Id = id;
                InitParameters();
            }


            /// <summary>Identifier of the course to delete. This identifier can be either the Classroom-assigned
            /// identifier or an alias.</summary>
            [Google.Apis.Util.RequestParameterAttribute("id", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string Id { get; private set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "delete"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "DELETE"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1/courses/{id}"; }
            }

            /// <summary>Initializes Delete parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "id", new Google.Apis.Discovery.Parameter
                    {
                        Name = "id",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }

        /// <summary>Returns a course. This method returns the following error codes: * `PERMISSION_DENIED` if the
        /// requesting user is not permitted to access the requested course or for access errors. * `NOT_FOUND` if no
        /// course exists with the requested ID.</summary>
        /// <param name="id">Identifier of the course to return. This identifier can be either the Classroom-assigned identifier
        /// or an alias.</param>
        public virtual GetRequest Get(string id)
        {
            return new GetRequest(service, id);
        }

        /// <summary>Returns a course. This method returns the following error codes: * `PERMISSION_DENIED` if the
        /// requesting user is not permitted to access the requested course or for access errors. * `NOT_FOUND` if no
        /// course exists with the requested ID.</summary>
        public class GetRequest : ClassroomBaseServiceRequest<Google.Apis.Classroom.v1.Data.Course>
        {
            /// <summary>Constructs a new Get request.</summary>
            public GetRequest(Google.Apis.Services.IClientService service, string id)
                : base(service)
            {
                Id = id;
                InitParameters();
            }


            /// <summary>Identifier of the course to return. This identifier can be either the Classroom-assigned
            /// identifier or an alias.</summary>
            [Google.Apis.Util.RequestParameterAttribute("id", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string Id { get; private set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "get"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "GET"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1/courses/{id}"; }
            }

            /// <summary>Initializes Get parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "id", new Google.Apis.Discovery.Parameter
                    {
                        Name = "id",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }

        /// <summary>Returns a list of courses that the requesting user is permitted to view, restricted to those that
        /// match the request. This method returns the following error codes: * `PERMISSION_DENIED` for access errors. *
        /// `INVALID_ARGUMENT` if the query argument is malformed. * `NOT_FOUND` if any users specified in the query
        /// arguments do not exist.</summary>
        public virtual ListRequest List()
        {
            return new ListRequest(service);
        }

        /// <summary>Returns a list of courses that the requesting user is permitted to view, restricted to those that
        /// match the request. This method returns the following error codes: * `PERMISSION_DENIED` for access errors. *
        /// `INVALID_ARGUMENT` if the query argument is malformed. * `NOT_FOUND` if any users specified in the query
        /// arguments do not exist.</summary>
        public class ListRequest : ClassroomBaseServiceRequest<Google.Apis.Classroom.v1.Data.ListCoursesResponse>
        {
            /// <summary>Constructs a new List request.</summary>
            public ListRequest(Google.Apis.Services.IClientService service)
                : base(service)
            {
                InitParameters();
            }


            /// <summary>Restricts returned courses to those having a student with the specified identifier. The
            /// identifier can be one of the following: * the numeric identifier for the user * the email address of the
            /// user * the string literal `"me"`, indicating the requesting user</summary>
            [Google.Apis.Util.RequestParameterAttribute("studentId", Google.Apis.Util.RequestParameterType.Query)]
            public virtual string StudentId { get; set; }

            /// <summary>Restricts returned courses to those having a teacher with the specified identifier. The
            /// identifier can be one of the following: * the numeric identifier for the user * the email address of the
            /// user * the string literal `"me"`, indicating the requesting user</summary>
            [Google.Apis.Util.RequestParameterAttribute("teacherId", Google.Apis.Util.RequestParameterType.Query)]
            public virtual string TeacherId { get; set; }

            /// <summary>Maximum number of items to return. Zero or unspecified indicates that the server may assign a
            /// maximum. The server may return fewer than the specified number of results.</summary>
            [Google.Apis.Util.RequestParameterAttribute("pageSize", Google.Apis.Util.RequestParameterType.Query)]
            public virtual System.Nullable<int> PageSize { get; set; }

            /// <summary>nextPageToken value returned from a previous list call, indicating that the subsequent page of
            /// results should be returned. The list request must be otherwise identical to the one that resulted in
            /// this token.</summary>
            [Google.Apis.Util.RequestParameterAttribute("pageToken", Google.Apis.Util.RequestParameterType.Query)]
            public virtual string PageToken { get; set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "list"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "GET"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1/courses"; }
            }

            /// <summary>Initializes List parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "studentId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "studentId",
                        IsRequired = false,
                        ParameterType = "query",
                        DefaultValue = null,
                        Pattern = null,
                    });
                RequestParameters.Add(
                    "teacherId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "teacherId",
                        IsRequired = false,
                        ParameterType = "query",
                        DefaultValue = null,
                        Pattern = null,
                    });
                RequestParameters.Add(
                    "pageSize", new Google.Apis.Discovery.Parameter
                    {
                        Name = "pageSize",
                        IsRequired = false,
                        ParameterType = "query",
                        DefaultValue = null,
                        Pattern = null,
                    });
                RequestParameters.Add(
                    "pageToken", new Google.Apis.Discovery.Parameter
                    {
                        Name = "pageToken",
                        IsRequired = false,
                        ParameterType = "query",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }

        /// <summary>Updates one or more fields in a course. This method returns the following error codes: *
        /// `PERMISSION_DENIED` if the requesting user is not permitted to modify the requested course or for access
        /// errors. * `NOT_FOUND` if no course exists with the requested ID. * `INVALID_ARGUMENT` if invalid fields are
        /// specified in the update mask or if no update mask is supplied. * `FAILED_PRECONDITION` for the following
        /// request errors: * CourseNotModifiable</summary>
        /// <param name="body">The body of the request.</param>
        /// <param name="id">Identifier of the course to update. This identifier can be either the Classroom-assigned identifier
        /// or an alias.</param>
        public virtual PatchRequest Patch(Google.Apis.Classroom.v1.Data.Course body, string id)
        {
            return new PatchRequest(service, body, id);
        }

        /// <summary>Updates one or more fields in a course. This method returns the following error codes: *
        /// `PERMISSION_DENIED` if the requesting user is not permitted to modify the requested course or for access
        /// errors. * `NOT_FOUND` if no course exists with the requested ID. * `INVALID_ARGUMENT` if invalid fields are
        /// specified in the update mask or if no update mask is supplied. * `FAILED_PRECONDITION` for the following
        /// request errors: * CourseNotModifiable</summary>
        public class PatchRequest : ClassroomBaseServiceRequest<Google.Apis.Classroom.v1.Data.Course>
        {
            /// <summary>Constructs a new Patch request.</summary>
            public PatchRequest(Google.Apis.Services.IClientService service, Google.Apis.Classroom.v1.Data.Course body, string id)
                : base(service)
            {
                Id = id;
                Body = body;
                InitParameters();
            }


            /// <summary>Identifier of the course to update. This identifier can be either the Classroom-assigned
            /// identifier or an alias.</summary>
            [Google.Apis.Util.RequestParameterAttribute("id", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string Id { get; private set; }

            /// <summary>Mask that identifies which fields on the course to update. This field is required to do an
            /// update. The update will fail if invalid fields are specified. The following fields are valid: * `name` *
            /// `section` * `descriptionHeading` * `description` * `room` * `courseState` When set in a query parameter,
            /// this field should be specified as `updateMask=,,...`</summary>
            [Google.Apis.Util.RequestParameterAttribute("updateMask", Google.Apis.Util.RequestParameterType.Query)]
            public virtual string UpdateMask { get; set; }


            /// <summary>Gets or sets the body of this request.</summary>
            Google.Apis.Classroom.v1.Data.Course Body { get; set; }

            ///<summary>Returns the body of the request.</summary>
            protected override object GetBody() { return Body; }

            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "patch"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "PATCH"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1/courses/{id}"; }
            }

            /// <summary>Initializes Patch parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "id", new Google.Apis.Discovery.Parameter
                    {
                        Name = "id",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
                RequestParameters.Add(
                    "updateMask", new Google.Apis.Discovery.Parameter
                    {
                        Name = "updateMask",
                        IsRequired = false,
                        ParameterType = "query",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }

        /// <summary>Updates a course. This method returns the following error codes: * `PERMISSION_DENIED` if the
        /// requesting user is not permitted to modify the requested course or for access errors. * `NOT_FOUND` if no
        /// course exists with the requested ID. * `FAILED_PRECONDITION` for the following request errors: *
        /// CourseNotModifiable</summary>
        /// <param name="body">The body of the request.</param>
        /// <param name="id">Identifier of the course to update. This identifier can be either the Classroom-assigned identifier
        /// or an alias.</param>
        public virtual UpdateRequest Update(Google.Apis.Classroom.v1.Data.Course body, string id)
        {
            return new UpdateRequest(service, body, id);
        }

        /// <summary>Updates a course. This method returns the following error codes: * `PERMISSION_DENIED` if the
        /// requesting user is not permitted to modify the requested course or for access errors. * `NOT_FOUND` if no
        /// course exists with the requested ID. * `FAILED_PRECONDITION` for the following request errors: *
        /// CourseNotModifiable</summary>
        public class UpdateRequest : ClassroomBaseServiceRequest<Google.Apis.Classroom.v1.Data.Course>
        {
            /// <summary>Constructs a new Update request.</summary>
            public UpdateRequest(Google.Apis.Services.IClientService service, Google.Apis.Classroom.v1.Data.Course body, string id)
                : base(service)
            {
                Id = id;
                Body = body;
                InitParameters();
            }


            /// <summary>Identifier of the course to update. This identifier can be either the Classroom-assigned
            /// identifier or an alias.</summary>
            [Google.Apis.Util.RequestParameterAttribute("id", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string Id { get; private set; }


            /// <summary>Gets or sets the body of this request.</summary>
            Google.Apis.Classroom.v1.Data.Course Body { get; set; }

            ///<summary>Returns the body of the request.</summary>
            protected override object GetBody() { return Body; }

            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "update"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "PUT"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1/courses/{id}"; }
            }

            /// <summary>Initializes Update parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "id", new Google.Apis.Discovery.Parameter
                    {
                        Name = "id",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }
    }

    /// <summary>The "invitations" collection of methods.</summary>
    public class InvitationsResource
    {
        private const string Resource = "invitations";

        /// <summary>The service which this resource belongs to.</summary>
        private readonly Google.Apis.Services.IClientService service;

        /// <summary>Constructs a new resource.</summary>
        public InvitationsResource(Google.Apis.Services.IClientService service)
        {
            this.service = service;

        }


        /// <summary>Accepts an invitation, removing it and adding the invited user to the teachers or students (as
        /// appropriate) of the specified course. Only the invited user may accept an invitation. This method returns
        /// the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to accept the
        /// requested invitation or for access errors. * `FAILED_PRECONDITION` for the following request errors: *
        /// CourseMemberLimitReached * CourseNotModifiable * CourseTeacherLimitReached *
        /// UserGroupsMembershipLimitReached * `NOT_FOUND` if no invitation exists with the requested ID.</summary>
        /// <param name="id">Identifier of the invitation to accept.</param>
        public virtual AcceptRequest Accept(string id)
        {
            return new AcceptRequest(service, id);
        }

        /// <summary>Accepts an invitation, removing it and adding the invited user to the teachers or students (as
        /// appropriate) of the specified course. Only the invited user may accept an invitation. This method returns
        /// the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to accept the
        /// requested invitation or for access errors. * `FAILED_PRECONDITION` for the following request errors: *
        /// CourseMemberLimitReached * CourseNotModifiable * CourseTeacherLimitReached *
        /// UserGroupsMembershipLimitReached * `NOT_FOUND` if no invitation exists with the requested ID.</summary>
        public class AcceptRequest : ClassroomBaseServiceRequest<Google.Apis.Classroom.v1.Data.Empty>
        {
            /// <summary>Constructs a new Accept request.</summary>
            public AcceptRequest(Google.Apis.Services.IClientService service, string id)
                : base(service)
            {
                Id = id;
                InitParameters();
            }


            /// <summary>Identifier of the invitation to accept.</summary>
            [Google.Apis.Util.RequestParameterAttribute("id", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string Id { get; private set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "accept"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "POST"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1/invitations/{id}:accept"; }
            }

            /// <summary>Initializes Accept parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "id", new Google.Apis.Discovery.Parameter
                    {
                        Name = "id",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }

        /// <summary>Creates an invitation. Only one invitation for a user and course may exist at a time. Delete and
        /// re-create an invitation to make changes. This method returns the following error codes: *
        /// `PERMISSION_DENIED` if the requesting user is not permitted to create invitations for this course or for
        /// access errors. * `NOT_FOUND` if the course or the user does not exist. * `FAILED_PRECONDITION` if the
        /// requested user's account is disabled or if the user already has this role or a role with greater
        /// permissions. * `ALREADY_EXISTS` if an invitation for the specified user and course already exists.</summary>
        /// <param name="body">The body of the request.</param>
        public virtual CreateRequest Create(Google.Apis.Classroom.v1.Data.Invitation body)
        {
            return new CreateRequest(service, body);
        }

        /// <summary>Creates an invitation. Only one invitation for a user and course may exist at a time. Delete and
        /// re-create an invitation to make changes. This method returns the following error codes: *
        /// `PERMISSION_DENIED` if the requesting user is not permitted to create invitations for this course or for
        /// access errors. * `NOT_FOUND` if the course or the user does not exist. * `FAILED_PRECONDITION` if the
        /// requested user's account is disabled or if the user already has this role or a role with greater
        /// permissions. * `ALREADY_EXISTS` if an invitation for the specified user and course already exists.</summary>
        public class CreateRequest : ClassroomBaseServiceRequest<Google.Apis.Classroom.v1.Data.Invitation>
        {
            /// <summary>Constructs a new Create request.</summary>
            public CreateRequest(Google.Apis.Services.IClientService service, Google.Apis.Classroom.v1.Data.Invitation body)
                : base(service)
            {
                Body = body;
                InitParameters();
            }



            /// <summary>Gets or sets the body of this request.</summary>
            Google.Apis.Classroom.v1.Data.Invitation Body { get; set; }

            ///<summary>Returns the body of the request.</summary>
            protected override object GetBody() { return Body; }

            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "create"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "POST"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1/invitations"; }
            }

            /// <summary>Initializes Create parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

            }

        }

        /// <summary>Deletes an invitation. This method returns the following error codes: * `PERMISSION_DENIED` if the
        /// requesting user is not permitted to delete the requested invitation or for access errors. * `NOT_FOUND` if
        /// no invitation exists with the requested ID.</summary>
        /// <param name="id">Identifier of the invitation to delete.</param>
        public virtual DeleteRequest Delete(string id)
        {
            return new DeleteRequest(service, id);
        }

        /// <summary>Deletes an invitation. This method returns the following error codes: * `PERMISSION_DENIED` if the
        /// requesting user is not permitted to delete the requested invitation or for access errors. * `NOT_FOUND` if
        /// no invitation exists with the requested ID.</summary>
        public class DeleteRequest : ClassroomBaseServiceRequest<Google.Apis.Classroom.v1.Data.Empty>
        {
            /// <summary>Constructs a new Delete request.</summary>
            public DeleteRequest(Google.Apis.Services.IClientService service, string id)
                : base(service)
            {
                Id = id;
                InitParameters();
            }


            /// <summary>Identifier of the invitation to delete.</summary>
            [Google.Apis.Util.RequestParameterAttribute("id", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string Id { get; private set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "delete"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "DELETE"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1/invitations/{id}"; }
            }

            /// <summary>Initializes Delete parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "id", new Google.Apis.Discovery.Parameter
                    {
                        Name = "id",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }

        /// <summary>Returns an invitation. This method returns the following error codes: * `PERMISSION_DENIED` if the
        /// requesting user is not permitted to view the requested invitation or for access errors. * `NOT_FOUND` if no
        /// invitation exists with the requested ID.</summary>
        /// <param name="id">Identifier of the invitation to return.</param>
        public virtual GetRequest Get(string id)
        {
            return new GetRequest(service, id);
        }

        /// <summary>Returns an invitation. This method returns the following error codes: * `PERMISSION_DENIED` if the
        /// requesting user is not permitted to view the requested invitation or for access errors. * `NOT_FOUND` if no
        /// invitation exists with the requested ID.</summary>
        public class GetRequest : ClassroomBaseServiceRequest<Google.Apis.Classroom.v1.Data.Invitation>
        {
            /// <summary>Constructs a new Get request.</summary>
            public GetRequest(Google.Apis.Services.IClientService service, string id)
                : base(service)
            {
                Id = id;
                InitParameters();
            }


            /// <summary>Identifier of the invitation to return.</summary>
            [Google.Apis.Util.RequestParameterAttribute("id", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string Id { get; private set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "get"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "GET"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1/invitations/{id}"; }
            }

            /// <summary>Initializes Get parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "id", new Google.Apis.Discovery.Parameter
                    {
                        Name = "id",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }

        /// <summary>Returns a list of invitations that the requesting user is permitted to view, restricted to those
        /// that match the list request. *Note:* At least one of `user_id` or `course_id` must be supplied. Both fields
        /// can be supplied. This method returns the following error codes: * `PERMISSION_DENIED` for access
        /// errors.</summary>
        public virtual ListRequest List()
        {
            return new ListRequest(service);
        }

        /// <summary>Returns a list of invitations that the requesting user is permitted to view, restricted to those
        /// that match the list request. *Note:* At least one of `user_id` or `course_id` must be supplied. Both fields
        /// can be supplied. This method returns the following error codes: * `PERMISSION_DENIED` for access
        /// errors.</summary>
        public class ListRequest : ClassroomBaseServiceRequest<Google.Apis.Classroom.v1.Data.ListInvitationsResponse>
        {
            /// <summary>Constructs a new List request.</summary>
            public ListRequest(Google.Apis.Services.IClientService service)
                : base(service)
            {
                InitParameters();
            }


            /// <summary>Restricts returned invitations to those for a specific user. The identifier can be one of the
            /// following: * the numeric identifier for the user * the email address of the user * the string literal
            /// `"me"`, indicating the requesting user</summary>
            [Google.Apis.Util.RequestParameterAttribute("userId", Google.Apis.Util.RequestParameterType.Query)]
            public virtual string UserId { get; set; }

            /// <summary>Restricts returned invitations to those for a course with the specified identifier.</summary>
            [Google.Apis.Util.RequestParameterAttribute("courseId", Google.Apis.Util.RequestParameterType.Query)]
            public virtual string CourseId { get; set; }

            /// <summary>Maximum number of items to return. Zero means no maximum. The server may return fewer than the
            /// specified number of results.</summary>
            [Google.Apis.Util.RequestParameterAttribute("pageSize", Google.Apis.Util.RequestParameterType.Query)]
            public virtual System.Nullable<int> PageSize { get; set; }

            /// <summary>nextPageToken value returned from a previous list call, indicating that the subsequent page of
            /// results should be returned. The list request must be otherwise identical to the one that resulted in
            /// this token.</summary>
            [Google.Apis.Util.RequestParameterAttribute("pageToken", Google.Apis.Util.RequestParameterType.Query)]
            public virtual string PageToken { get; set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "list"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "GET"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1/invitations"; }
            }

            /// <summary>Initializes List parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "userId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "userId",
                        IsRequired = false,
                        ParameterType = "query",
                        DefaultValue = null,
                        Pattern = null,
                    });
                RequestParameters.Add(
                    "courseId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "courseId",
                        IsRequired = false,
                        ParameterType = "query",
                        DefaultValue = null,
                        Pattern = null,
                    });
                RequestParameters.Add(
                    "pageSize", new Google.Apis.Discovery.Parameter
                    {
                        Name = "pageSize",
                        IsRequired = false,
                        ParameterType = "query",
                        DefaultValue = null,
                        Pattern = null,
                    });
                RequestParameters.Add(
                    "pageToken", new Google.Apis.Discovery.Parameter
                    {
                        Name = "pageToken",
                        IsRequired = false,
                        ParameterType = "query",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }
    }

    /// <summary>The "userProfiles" collection of methods.</summary>
    public class UserProfilesResource
    {
        private const string Resource = "userProfiles";

        /// <summary>The service which this resource belongs to.</summary>
        private readonly Google.Apis.Services.IClientService service;

        /// <summary>Constructs a new resource.</summary>
        public UserProfilesResource(Google.Apis.Services.IClientService service)
        {
            this.service = service;

        }


        /// <summary>Returns a user profile. This method returns the following error codes: * `PERMISSION_DENIED` if the
        /// requesting user is not permitted to access this user profile or if no profile exists with the requested ID
        /// or for access errors.</summary>
        /// <param name="userId">Identifier of the profile to return. The identifier can be one of the following: * the numeric
        /// identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting
        /// user</param>
        public virtual GetRequest Get(string userId)
        {
            return new GetRequest(service, userId);
        }

        /// <summary>Returns a user profile. This method returns the following error codes: * `PERMISSION_DENIED` if the
        /// requesting user is not permitted to access this user profile or if no profile exists with the requested ID
        /// or for access errors.</summary>
        public class GetRequest : ClassroomBaseServiceRequest<Google.Apis.Classroom.v1.Data.UserProfile>
        {
            /// <summary>Constructs a new Get request.</summary>
            public GetRequest(Google.Apis.Services.IClientService service, string userId)
                : base(service)
            {
                UserId = userId;
                InitParameters();
            }


            /// <summary>Identifier of the profile to return. The identifier can be one of the following: * the numeric
            /// identifier for the user * the email address of the user * the string literal `"me"`, indicating the
            /// requesting user</summary>
            [Google.Apis.Util.RequestParameterAttribute("userId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string UserId { get; private set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "get"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "GET"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "v1/userProfiles/{userId}"; }
            }

            /// <summary>Initializes Get parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "userId", new Google.Apis.Discovery.Parameter
                    {
                        Name = "userId",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }
    }
}

namespace Google.Apis.Classroom.v1.Data
{    

    /// <summary>A Course in Classroom.</summary>
    public class Course : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Absolute link to this course in the Classroom web UI. Read-only.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("alternateLink")]
        public virtual string AlternateLink { get; set; } 

        /// <summary>State of the course. If unspecified, the default state is `PROVISIONED`.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("courseState")]
        public virtual string CourseState { get; set; } 

        /// <summary>Creation time of the course. Specifying this field in a course update mask will result in an error.
        /// Read-only.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("creationTime")]
        public virtual string CreationTime { get; set; } 

        /// <summary>Optional description. For example, "We'll be learning about the structure of living creatures from
        /// a combination of textbooks, guest lectures, and lab work. Expect to be excited!" If set, this field must be
        /// a valid UTF-8 string and no longer than 30,000 characters.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("description")]
        public virtual string Description { get; set; } 

        /// <summary>Optional heading for the description. For example, "Welcome to 10th Grade Biology." If set, this
        /// field must be a valid UTF-8 string and no longer than 3600 characters.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("descriptionHeading")]
        public virtual string DescriptionHeading { get; set; } 

        /// <summary>Enrollment code to use when joining this course. Specifying this field in a course update mask will
        /// result in an error. Read-only.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("enrollmentCode")]
        public virtual string EnrollmentCode { get; set; } 

        /// <summary>Identifier for this course assigned by Classroom. When creating a course, you may optionally set
        /// this identifier to an alias string in the request to create a corresponding alias. The `id` is still
        /// assigned by Classroom and cannot be updated after the course is created. Specifying this field in a course
        /// update mask will result in an error.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("id")]
        public virtual string Id { get; set; } 

        /// <summary>Name of the course. For example, "10th Grade Biology". The name is required. It must be between 1
        /// and 750 characters and a valid UTF-8 string.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        public virtual string Name { get; set; } 

        /// <summary>The identifier of the owner of a course. When specified as a parameter of a create course request,
        /// this field is required. The identifier can be one of the following: * the numeric identifier for the user *
        /// the email address of the user * the string literal `"me"`, indicating the requesting user This must be set
        /// in a create request. Specifying this field in a course update mask will result in an `INVALID_ARGUMENT`
        /// error.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ownerId")]
        public virtual string OwnerId { get; set; } 

        /// <summary>Optional room location. For example, "301". If set, this field must be a valid UTF-8 string and no
        /// longer than 650 characters.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("room")]
        public virtual string Room { get; set; } 

        /// <summary>Section of the course. For example, "Period 2". If set, this field must be a valid UTF-8 string and
        /// no longer than 2800 characters.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("section")]
        public virtual string Section { get; set; } 

        /// <summary>Time of the most recent update to this course. Specifying this field in a course update mask will
        /// result in an error. Read-only.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("updateTime")]
        public virtual string UpdateTime { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Alternative identifier for a course. An alias uniquely identifies a course. It must be unique within
    /// one of the following scopes: * domain: A domain-scoped alias is visible to all users within the alias creator's
    /// domain and can be created only by a domain admin. A domain-scoped alias is often used when a course has an
    /// identifier external to Classroom. * project: A project-scoped alias is visible to any request from an
    /// application using the Developer Console project ID that created the alias and can be created by any project. A
    /// project-scoped alias is often used when an application has alternative identifiers. A random value can also be
    /// used to avoid duplicate courses in the event of transmission failures, as retrying a request will return
    /// `ALREADY_EXISTS` if a previous one has succeeded.</summary>
    public class CourseAlias : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Alias string. The format of the string indicates the desired alias scoping. * `d:` indicates a
        /// domain-scoped alias. Example: `d:math_101` * `p:` indicates a project-scoped alias. Example: `p:abc123` This
        /// field has a maximum length of 256 characters.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("alias")]
        public virtual string Alias { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A
    /// typical example is to use it as the request or the response type of an API method. For instance: service Foo {
    /// rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty
    /// JSON object `{}`.</summary>
    public class Empty : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Global user permission description.</summary>
    public class GlobalPermission : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Permission value.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("permission")]
        public virtual string Permission { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>An invitation to join a course.</summary>
    public class Invitation : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Identifier of the course to invite the user to.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("courseId")]
        public virtual string CourseId { get; set; } 

        /// <summary>Identifier assigned by Classroom. Read-only.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("id")]
        public virtual string Id { get; set; } 

        /// <summary>Role to invite the user to have. Must not be `COURSE_ROLE_UNSPECIFIED`.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("role")]
        public virtual string Role { get; set; } 

        /// <summary>Identifier of the invited user. When specified as a parameter of a request, this identifier can be
        /// set to one of the following: * the numeric identifier for the user * the email address of the user * the
        /// string literal `"me"`, indicating the requesting user</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("userId")]
        public virtual string UserId { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Response when listing course aliases.</summary>
    public class ListCourseAliasesResponse : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The course aliases.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("aliases")]
        public virtual System.Collections.Generic.IList<CourseAlias> Aliases { get; set; } 

        /// <summary>Token identifying the next page of results to return. If empty, no further results are
        /// available.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("nextPageToken")]
        public virtual string NextPageToken { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Response when listing courses.</summary>
    public class ListCoursesResponse : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Courses that match the list request.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("courses")]
        public virtual System.Collections.Generic.IList<Course> Courses { get; set; } 

        /// <summary>Token identifying the next page of results to return. If empty, no further results are
        /// available.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("nextPageToken")]
        public virtual string NextPageToken { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Response when listing invitations.</summary>
    public class ListInvitationsResponse : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Invitations that match the list request.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("invitations")]
        public virtual System.Collections.Generic.IList<Invitation> Invitations { get; set; } 

        /// <summary>Token identifying the next page of results to return. If empty, no further results are
        /// available.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("nextPageToken")]
        public virtual string NextPageToken { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Response when listing students.</summary>
    public class ListStudentsResponse : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Token identifying the next page of results to return. If empty, no further results are
        /// available.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("nextPageToken")]
        public virtual string NextPageToken { get; set; } 

        /// <summary>Students who match the list request.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("students")]
        public virtual System.Collections.Generic.IList<Student> Students { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Response when listing teachers.</summary>
    public class ListTeachersResponse : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Token identifying the next page of results to return. If empty, no further results are
        /// available.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("nextPageToken")]
        public virtual string NextPageToken { get; set; } 

        /// <summary>Teachers who match the list request.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("teachers")]
        public virtual System.Collections.Generic.IList<Teacher> Teachers { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Details of the user's name.</summary>
    public class Name : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>The user's last name. Read-only.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("familyName")]
        public virtual string FamilyName { get; set; } 

        /// <summary>The user's full name formed by concatenating the first and last name values. Read-only.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("fullName")]
        public virtual string FullName { get; set; } 

        /// <summary>The user's first name. Read-only.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("givenName")]
        public virtual string GivenName { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Student in a course.</summary>
    public class Student : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Identifier of the course. Read-only.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("courseId")]
        public virtual string CourseId { get; set; } 

        /// <summary>Global user information for the student. Read-only.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("profile")]
        public virtual UserProfile Profile { get; set; } 

        /// <summary>Identifier of the user. When specified as a parameter of a request, this identifier can be one of
        /// the following: * the numeric identifier for the user * the email address of the user * the string literal
        /// `"me"`, indicating the requesting user</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("userId")]
        public virtual string UserId { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Teacher of a course.</summary>
    public class Teacher : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Identifier of the course. Read-only.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("courseId")]
        public virtual string CourseId { get; set; } 

        /// <summary>Global user information for the teacher. Read-only.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("profile")]
        public virtual UserProfile Profile { get; set; } 

        /// <summary>Identifier of the user. When specified as a parameter of a request, this identifier can be one of
        /// the following: * the numeric identifier for the user * the email address of the user * the string literal
        /// `"me"`, indicating the requesting user</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("userId")]
        public virtual string UserId { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Global information for a user.</summary>
    public class UserProfile : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Email address of the user. Read-only.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("emailAddress")]
        public virtual string EmailAddress { get; set; } 

        /// <summary>Identifier of the user. Read-only.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("id")]
        public virtual string Id { get; set; } 

        /// <summary>Name of the user. Read-only.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        public virtual Name Name { get; set; } 

        /// <summary>Global permissions of the user. Read-only.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("permissions")]
        public virtual System.Collections.Generic.IList<GlobalPermission> Permissions { get; set; } 

        /// <summary>URL of user's profile photo. Read-only.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("photoUrl")]
        public virtual string PhotoUrl { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }
}
